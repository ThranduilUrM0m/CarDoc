{
	"version": 3,
	"file": "../../../sass/compass/utilities/general.css",
	"sources": [
		"../../../sass/compass/utilities/general.scss",
		"../../../sass/compass/utilities/general/reset.scss",
		"../../../../../../../../../Desktop/Scout-App/bower_components/compass-mixins/lib/compass/reset/_utilities.scss",
		"../../../sass/compass/utilities/general/clearfix.scss",
		"../../../sass/compass/utilities/general/hacks.scss",
		"../../../../../../../../../Desktop/Scout-App/bower_components/compass-mixins/lib/compass/_support.scss",
		"../../../sass/compass/utilities/general/float.scss",
		"../../../sass/compass/utilities/general/tag-cloud.scss",
		"../../../sass/compass/utilities/general/min.scss"
	],
	"sourcesContent": [
		"@import \"general/reset\";\n@import \"general/clearfix\";\n@import \"general/float\";\n@import \"general/tag-cloud\";\n@import \"general/hacks\";\n@import \"general/min\";\n",
		"// This module has moved.\n@import \"compass/reset/utilities\";",
		"// Based on [Eric Meyer's reset 2.0](http://meyerweb.com/eric/tools/css/reset/index.html)\r\n// Global reset rules.\r\n// For more specific resets, use the reset mixins provided below\r\n@mixin global-reset {\r\n  html, body, div, span, applet, object, iframe,\r\n  h1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\n  a, abbr, acronym, address, big, cite, code,\r\n  del, dfn, em, img, ins, kbd, q, s, samp,\r\n  small, strike, strong, sub, sup, tt, var,\r\n  b, u, i, center,\r\n  dl, dt, dd, ol, ul, li,\r\n  fieldset, form, label, legend,\r\n  table, caption, tbody, tfoot, thead, tr, th, td,\r\n  article, aside, canvas, details, embed, \r\n  figure, figcaption, footer, header, hgroup, \r\n  menu, nav, output, ruby, section, summary,\r\n  time, mark, audio, video {\r\n    @include reset-box-model;\r\n    @include reset-font; }\r\n  // Unlike Eric's original reset, we reset the html element to be compatible\r\n  // with the vertical rhythm mixins.\r\n  html {\r\n    @include reset-body; }\r\n  ol, ul {\r\n    @include reset-list-style; }\r\n  table {\r\n    @include reset-table; }\r\n  caption, th, td {\r\n    @include reset-table-cell; }\r\n  q, blockquote {\r\n    @include reset-quotation; }\r\n  a img {\r\n    @include reset-image-anchor-border; }\r\n  @include reset-html5; }\r\n\r\n// Reset all elements within some selector scope. To reset the selector itself,\r\n// mixin the appropriate reset mixin for that element type as well. This could be\r\n// useful if you want to style a part of your page in a dramatically different way.\r\n@mixin nested-reset {\r\n  div, span, applet, object, iframe,\r\n  h1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\n  a, abbr, acronym, address, big, cite, code,\r\n  del, dfn, em, img, ins, kbd, q, s, samp,\r\n  small, strike, strong, sub, sup, tt, var,\r\n  b, u, i, center,\r\n  dl, dt, dd, ol, ul, li,\r\n  fieldset, form, label, legend,\r\n  table, caption, tbody, tfoot, thead, tr, th, td,\r\n  article, aside, canvas, details, embed, \r\n  figure, figcaption, footer, header, hgroup, \r\n  menu, nav, output, ruby, section, summary,\r\n  time, mark, audio, video {\r\n    @include reset-box-model;\r\n    @include reset-font; }\r\n  table {\r\n    @include reset-table; }\r\n  caption, th, td {\r\n    @include reset-table-cell; }\r\n  q, blockquote {\r\n    @include reset-quotation; }\r\n  a img {\r\n    @include reset-image-anchor-border; } }\r\n\r\n// Reset the box model measurements.\r\n@mixin reset-box-model {\r\n  margin: 0;\r\n  padding: 0;\r\n  border: 0; }\r\n\r\n// Reset the font and vertical alignment.\r\n@mixin reset-font {\r\n  font: inherit;\r\n  font-size: 100%;\r\n  vertical-align: baseline; }\r\n\r\n// Resets the outline when focus.\r\n// For accessibility you need to apply some styling in its place.\r\n@mixin reset-focus {\r\n  outline: 0; }\r\n\r\n// Reset a body element.\r\n@mixin reset-body {\r\n  line-height: 1; }\r\n\r\n// Reset the list style of an element.\r\n@mixin reset-list-style {\r\n  list-style: none; }\r\n\r\n// Reset a table\r\n@mixin reset-table {\r\n  border-collapse: collapse;\r\n  border-spacing: 0; }\r\n\r\n// Reset a table cell (`th`, `td`)\r\n@mixin reset-table-cell {\r\n  text-align: left;\r\n  font-weight: normal;\r\n  vertical-align: middle; }\r\n\r\n// Reset a quotation (`q`, `blockquote`)\r\n@mixin reset-quotation {\r\n  quotes: none;\r\n  &:before, &:after {\r\n    content: \"\"; \r\n    content: none; } }\r\n\r\n// Resets the border.\r\n@mixin reset-image-anchor-border {\r\n  border: none; }\r\n\r\n// Unrecognized elements are displayed inline.\r\n// This reset provides a basic reset for block html5 elements\r\n// so they are rendered correctly in browsers that don't recognize them\r\n// and reset in browsers that have default styles for them.\r\n@mixin reset-html5 {\r\n  #{elements-of-type(html5-block)} {\r\n    display: block; } }\r\n\r\n// Resets the display of inline and block elements to their default display\r\n// according to their tag type. Elements that have a default display that varies across\r\n// versions of html or browser are not handled here, but this covers the 90% use case.\r\n// Usage Example:\r\n//\r\n//     // Turn off the display for both of these classes\r\n//     .unregistered-only, .registered-only\r\n//       display: none\r\n//     // Now turn only one of them back on depending on some other context.\r\n//     body.registered\r\n//       +reset-display(\".registered-only\")\r\n//     body.unregistered\r\n//       +reset-display(\".unregistered-only\")\r\n@mixin reset-display($selector: \"\", $important: false) {\r\n  #{append-selector(elements-of-type(\"inline\"), $selector)} {\r\n    @if $important {\r\n      display: inline !important; }\r\n    @else {\r\n      display: inline; } }\r\n  #{append-selector(elements-of-type(\"block\"), $selector)} {\r\n    @if $important {\r\n      display: block !important; }\r\n    @else {\r\n      display: block; } } }\r\n",
		"// @doc off\n// Extends the bottom of the element to enclose any floats it contains.\n// @doc on\n\n@import \"hacks\";\n\n// This basic method is preferred for the usual case, when positioned\n// content will not show outside the bounds of the container.\n//\n// Recommendations include using this in conjunction with a width.\n// Credit: [quirksmode.org](http://www.quirksmode.org/blog/archives/2005/03/clearing_floats.html)\n@mixin clearfix {\n  overflow: hidden;\n  @include has-layout;\n}\n\n// This older method from Position Is Everything called\n// [Easy Clearing](http://www.positioniseverything.net/easyclearing.html)\n// has the advantage of allowing positioned elements to hang\n// outside the bounds of the container at the expense of more tricky CSS.\n@mixin legacy-pie-clearfix {\n  &:after {\n    content    : \"\\0020\";\n    display    : block;\n    height     : 0;\n    clear      : both;\n    overflow   : hidden;\n    visibility : hidden;\n  }\n  @include has-layout;\n}\n\n// This is an updated version of the PIE clearfix method that reduces the amount of CSS output.\n// If you need to support Firefox before 3.5 you need to use `legacy-pie-clearfix` instead.\n//\n// Adapted from: [A new micro clearfix hack](http://nicolasgallagher.com/micro-clearfix-hack/)\n@mixin pie-clearfix {\n  &:after {\n    content: \"\";\n    display: table;\n    clear: both;\n  }\n  @include has-layout;\n}\n",
		"@import \"compass/support\";\n\n// The `zoom` approach generates less CSS but does not validate.\n// Set this to `block` to use the display-property to hack the\n// element to gain layout.\n$default-has-layout-approach: zoom !default;\n\n// This mixin causes an element matching the selector\n// to gain the \"hasLayout\" property in internet explorer.\n// More information on [hasLayout](http://reference.sitepoint.com/css/haslayout).\n@mixin has-layout($approach: $default-has-layout-approach) {\n  @if $legacy-support-for-ie {\n    @if $approach == zoom {\n      @include has-layout-zoom;\n    } @else if $approach == block {\n      @include has-layout-block;\n    } @else {\n      @warn \"Unknown has-layout approach: #{$approach}\";\n      @include has-layout-zoom;\n    }\n  }\n}\n\n@mixin has-layout-zoom {\n  @if $legacy-support-for-ie6 or $legacy-support-for-ie7 {\n    *zoom: 1;\n  }\n}\n\n@mixin has-layout-block {\n  @if $legacy-support-for-ie {\n    // This makes ie6 get layout\n    display: inline-block;\n    // and this puts it back to block\n    & { display: block; }\n  }\n}\n\n// A hack to supply IE6 (and below) with a different property value.\n// [Read more](http://www.cssportal.com/css-hacks/#in_css-important).\n@mixin bang-hack($property, $value, $ie6-value) {\n  @if $legacy-support-for-ie6 {\n    #{$property}: #{$value} !important;\n    #{$property}: #{$ie6-value};\n  }\n}\n",
		"// Usually compass hacks apply to both ie6 & 7 -- set this to false to disable support for both.\r\n$legacy-support-for-ie: true !default;\r\n\r\n// Setting this to false will result in smaller output, but no support for ie6 hacks\r\n$legacy-support-for-ie6: $legacy-support-for-ie !default;\r\n\r\n// Setting this to false will result in smaller output, but no support for ie7 hacks\r\n$legacy-support-for-ie7: $legacy-support-for-ie !default;\r\n\r\n// Setting this to false will result in smaller output, but no support for legacy ie8 hacks\r\n$legacy-support-for-ie8: $legacy-support-for-ie !default;\r\n\r\n// @private\r\n// The user can simply set $legacy-support-for-ie and 6, 7, and 8 will be set accordingly,\r\n// But in case the user set each of those explicitly, we need to sync the value of\r\n// this combined variable.\r\n$legacy-support-for-ie: $legacy-support-for-ie6 or $legacy-support-for-ie7 or $legacy-support-for-ie8;\r\n\r\n// Whether to output legacy support for mozilla.\r\n// Usually this means hacks to support Firefox 3.6 or earlier.\r\n$legacy-support-for-mozilla: true;\r\n\r\n// Support for mozilla in experimental css3 properties (-moz).\r\n$experimental-support-for-mozilla      : true !default;\r\n// Support for webkit in experimental css3 properties (-webkit).\r\n$experimental-support-for-webkit       : true !default;\r\n// Support for webkit's original (non-standard) gradient syntax.\r\n$support-for-original-webkit-gradients : true !default;\r\n// Support for opera in experimental css3 properties (-o).\r\n$experimental-support-for-opera        : true !default;\r\n// Support for microsoft in experimental css3 properties (-ms).\r\n$experimental-support-for-microsoft    : true !default;\r\n// Support for khtml in experimental css3 properties (-khtml).\r\n$experimental-support-for-khtml        : false !default;\r\n// Support for svg in experimental css3 properties.\r\n// Setting this to true might add significant size to your\r\n// generated stylesheets.\r\n$experimental-support-for-svg          : false !default;\r\n// Support for CSS PIE in experimental css3 properties (-pie).\r\n$experimental-support-for-pie          : false !default;\r\n",
		"// Implementation of float:left with fix for the\n// [double-margin bug in IE5/6](http://www.positioniseverything.net/explorer/doubled-margin.html)\n@mixin float-left {\n  @include float(left); }\n\n// Implementation of float:right with fix for the\n// [double-margin bug in IE5/6](http://www.positioniseverything.net/explorer/doubled-margin.html)\n@mixin float-right {\n  @include float(right); }\n\n// Direction independent float mixin that fixes the\n// [double-margin bug in IE5/6](http://www.positioniseverything.net/explorer/doubled-margin.html)\n@mixin float($side: left) {\n  display: inline;\n  float: unquote($side); }\n\n// Resets floated elements back to their default of `float: none` and defaults\n// to `display: block` unless you pass `inline` as an argument\n//\n// Usage Example:\n//\n//     body.homepage\n//       #footer li\n//         +float-left\n//     body.signup\n//       #footer li\n//         +reset-float\n@mixin reset-float($display: block) {\n  float: none;\n  display: $display; }",
		"// Emits styles for a tag cloud\n@mixin tag-cloud($base-size: 1em) {\n  font-size: $base-size;\n  line-height: 1.2 * $base-size;\n  .xxs, .xs, .s, .l, .xl, .xxl {\n    line-height: 1.2 * $base-size; }\n  .xxs {\n    font-size: $base-size / 2; }\n  .xs {\n    font-size: 2 * $base-size / 3; }\n  .s {\n    font-size: 3 * $base-size / 4; }\n  .l {\n    font-size: 4 * $base-size / 3; }\n  .xl {\n    font-size: 3 * $base-size / 2; }\n  .xxl {\n    font-size: 2 * $base-size; } }\n",
		"@import \"hacks\";\n\n//**\n// Cross browser min-height mixin.\n@mixin min-height($value) {\n  @include hacked-minimum(height, $value); }\n\n//**\n// Cross browser min-width mixin.\n@mixin min-width($value) {\n  @include hacked-minimum(width, $value); }\n\n// @private This mixin is not meant to be used directly.\n@mixin hacked-minimum($property, $value) {\n  min-#{$property}: $value;\n  @include bang-hack($property, auto, $value); }\n"
	],
	"mappings": "",
	"names": []
}