{
	"version": 3,
	"file": "../../../../sass/scssphp-compass-master/stylesheets/compass/typography.css",
	"sources": [
		"../../../../sass/scssphp-compass-master/stylesheets/compass/typography.scss",
		"../../../../sass/scssphp-compass-master/stylesheets/compass/typography/links.scss",
		"../../../../sass/scssphp-compass-master/stylesheets/compass/typography/links/hover-link.scss",
		"../../../../sass/scssphp-compass-master/stylesheets/compass/typography/links/link-colors.scss",
		"../../../../sass/scssphp-compass-master/stylesheets/compass/typography/links/unstyled-link.scss",
		"../../../../sass/scssphp-compass-master/stylesheets/compass/typography/lists.scss",
		"../../../../sass/scssphp-compass-master/stylesheets/compass/typography/lists/horizontal-list.scss",
		"../../../../sass/scssphp-compass-master/stylesheets/compass/typography/lists/bullets.scss",
		"../../../../../../../../../../Desktop/Scout-App/bower_components/compass-mixins/lib/compass/utilities/general/_clearfix.scss",
		"../../../../../../../../../../Desktop/Scout-App/bower_components/compass-mixins/lib/compass/utilities/general/_hacks.scss",
		"../../../../../../../../../../Desktop/Scout-App/bower_components/compass-mixins/lib/compass/_support.scss",
		"../../../../../../../../../../Desktop/Scout-App/bower_components/compass-mixins/lib/compass/utilities/general/_reset.scss",
		"../../../../../../../../../../Desktop/Scout-App/bower_components/compass-mixins/lib/compass/reset/_utilities.scss",
		"../../../../../../../../../../Desktop/Scout-App/bower_components/compass-mixins/lib/compass/utilities/general/_float.scss",
		"../../../../sass/scssphp-compass-master/stylesheets/compass/typography/lists/inline-list.scss",
		"../../../../sass/scssphp-compass-master/stylesheets/compass/typography/lists/inline-block-list.scss",
		"../../../../../../../../../../Desktop/Scout-App/bower_components/compass-mixins/lib/compass/css3/_inline-block.scss",
		"../../../../../../../../../../Desktop/Scout-App/bower_components/compass-mixins/lib/compass/css3/_shared.scss",
		"../../../../sass/scssphp-compass-master/stylesheets/compass/typography/text.scss",
		"../../../../sass/scssphp-compass-master/stylesheets/compass/typography/text/ellipsis.scss",
		"../../../../sass/scssphp-compass-master/stylesheets/compass/typography/text/nowrap.scss",
		"../../../../sass/scssphp-compass-master/stylesheets/compass/typography/text/replacement.scss",
		"../../../../sass/scssphp-compass-master/stylesheets/compass/typography/text/force-wrap.scss",
		"../../../../sass/scssphp-compass-master/stylesheets/compass/typography/vertical_rhythm.scss",
		"../../../../../../../../../../Desktop/Scout-App/bower_components/compass-mixins/lib/compass/layout/_grid-background.scss",
		"../../../../../../../../../../Desktop/Scout-App/bower_components/compass-mixins/lib/compass/css3/_images.scss",
		"../../../../../../../../../../Desktop/Scout-App/bower_components/compass-mixins/lib/compass/_functions.scss",
		"../../../../../../../../../../Desktop/Scout-App/bower_components/compass-mixins/lib/compass/functions/_lists.scss",
		"../../../../../../../../../../Desktop/Scout-App/bower_components/compass-mixins/lib/compass/functions/_cross_browser_support.scss",
		"../../../../../../../../../../Desktop/Scout-App/bower_components/compass-mixins/lib/compass/functions/_gradient_support.scss",
		"../../../../../../../../../../Desktop/Scout-App/bower_components/compass-mixins/lib/compass/functions/_constants.scss",
		"../../../../../../../../../../Desktop/Scout-App/bower_components/compass-mixins/lib/compass/functions/_display.scss",
		"../../../../../../../../../../Desktop/Scout-App/bower_components/compass-mixins/lib/compass/functions/_colors.scss",
		"../../../../../../../../../../Desktop/Scout-App/bower_components/compass-mixins/lib/compass/css3/_background-size.scss"
	],
	"sourcesContent": [
		"@import \"typography/links\";\n@import \"typography/lists\";\n@import \"typography/text\";\n@import \"typography/vertical_rhythm\";\n",
		"@import \"links/hover-link\";\n@import \"links/link-colors\";\n@import \"links/unstyled-link\";\n",
		"// a link that only has an underline when you hover over it\n@mixin hover-link {\n  text-decoration: none;\n  &:hover {\n    text-decoration: underline; } }\n",
		"// Set all the colors for a link with one mixin call.\n// Order of arguments is:\n//\n// 1. normal\n// 2. hover\n// 3. active\n// 4. visited\n// 5. focus\n//\n// Those states not specified will inherit.\n// Mixin to an anchor link like so:\n//     a\n//       +link-colors(#00c, #0cc, #c0c, #ccc, #cc0)\n\n@mixin link-colors($normal, $hover: false, $active: false, $visited: false, $focus: false) {\n  color: $normal;\n  @if $visited {\n    &:visited {\n      color: $visited; } }\n  @if $focus {\n    &:focus {\n      color: $focus; } }\n  @if $hover {\n    &:hover {\n      color: $hover; } }\n  @if $active {\n    &:active {\n      color: $active; } } }\n",
		"// A link that looks and acts like the text it is contained within\n@mixin unstyled-link {\n  color: inherit;\n  text-decoration: inherit;\n  cursor: inherit;\n  &:active, &:focus {\n    outline: none; } }\n",
		"@import \"lists/horizontal-list\";\n@import \"lists/inline-list\";\n@import \"lists/inline-block-list\";\n@import \"lists/bullets\";\n",
		"// Horizontal list layout module.\n//\n// Easy mode using simple descendant li selectors:\n//\n//   ul.nav\n//     +horizontal-list\n//\n// Advanced mode:\n// If you need to target the list items using a different selector then use\n// +horizontal-list-container on your ul/ol and +horizontal-list-item on your li.\n// This may help when working on layouts involving nested lists. For example:\n//\n//   ul.nav\n//     +horizontal-list-container\n//     > li\n//       +horizontal-list-item\n\n@import \"bullets\";\n@import \"compass/utilities/general/clearfix\";\n@import \"compass/utilities/general/reset\";\n@import \"compass/utilities/general/float\";\n\n// Can be mixed into any selector that target a ul or ol that is meant\n// to have a horizontal layout. Used to implement +horizontal-list.\n@mixin horizontal-list-container {\n  @include reset-box-model;\n  @include clearfix; }\n\n// Can be mixed into any li selector that is meant to participate in a horizontal layout.\n// Used to implement +horizontal-list.\n//\n// :last-child is not fully supported\n// see http://www.quirksmode.org/css/contents.html#t29 for the support matrix\n// \n// IE8 ignores rules that are included on the same line as :last-child\n// see http://www.richardscarrott.co.uk/posts/view/ie8-last-child-bug for details\n//\n// Setting `$padding` to `false` disables the padding between list elements\n@mixin horizontal-list-item($padding: 4px, $direction: left) {\n  @include no-bullet;\n  white-space: nowrap;\n  @include float($direction);\n  @if $padding {\n    padding: {\n      left: $padding;\n      right: $padding;\n    }\n    &:first-child, &.first { padding-#{$direction}: 0; }\n    &:last-child { padding-#{opposite-position($direction)}: 0; }\n    &.last { padding-#{opposite-position($direction)}: 0; }\n  }\n}\n\n// A list(ol,ul) that is layed out such that the elements are floated left and won't wrap.\n// This is not an inline list.\n//\n// Setting `$padding` to `false` disables the padding between list elements\n@mixin horizontal-list($padding: 4px, $direction: left) {\n  @include horizontal-list-container;\n  li {\n    @include horizontal-list-item($padding, $direction); } }\n",
		"// Turn off the bullet for an element of a list\n@mixin no-bullet {\n  list-style-image : none;\n  list-style-type  : none;\n  margin-left      : 0;\n}\n\n// turns off the bullets for an entire list\n@mixin no-bullets {\n  list-style: none;\n  li { @include no-bullet; }\n}\n\n// Make a list(ul/ol) have an image bullet.\n//\n// The mixin should be used like this for an icon that is 5x7:\n//\n//     ul.pretty\n//       +pretty-bullets(\"my-icon.png\", 5px, 7px)\n//\n// Additionally, if the image dimensions are not provided,\n// The image dimensions will be extracted from the image itself.\n//\n//     ul.pretty\n//       +pretty-bullets(\"my-icon.png\")\n//\n@mixin pretty-bullets($bullet-icon, $width: image-width($bullet-icon), $height: image-height($bullet-icon), $line-height: 18px, $padding: 14px) {\n  margin-left: 0;\n  li {\n    padding-left: $padding;\n    background: image-url($bullet-icon) no-repeat ($padding - $width) / 2 ($line-height - $height) / 2;\n    list-style-type: none;\n  }\n}\n",
		"// @doc off\r\n// Extends the bottom of the element to enclose any floats it contains.\r\n// @doc on\r\n\r\n@import \"hacks\";\r\n\r\n// This basic method is preferred for the usual case, when positioned\r\n// content will not show outside the bounds of the container.\r\n//\r\n// Recommendations include using this in conjunction with a width.\r\n// Credit: [quirksmode.org](http://www.quirksmode.org/blog/archives/2005/03/clearing_floats.html)\r\n@mixin clearfix {\r\n  overflow: hidden;\r\n  @include has-layout;\r\n}\r\n\r\n// This older method from Position Is Everything called\r\n// [Easy Clearing](http://www.positioniseverything.net/easyclearing.html)\r\n// has the advantage of allowing positioned elements to hang\r\n// outside the bounds of the container at the expense of more tricky CSS.\r\n@mixin legacy-pie-clearfix {\r\n  &:after {\r\n    content    : \"\\0020\";\r\n    display    : block;\r\n    height     : 0;\r\n    clear      : both;\r\n    overflow   : hidden;\r\n    visibility : hidden;\r\n  }\r\n  @include has-layout;\r\n}\r\n\r\n// This is an updated version of the PIE clearfix method that reduces the amount of CSS output.\r\n// If you need to support Firefox before 3.5 you need to use `legacy-pie-clearfix` instead.\r\n//\r\n// Adapted from: [A new micro clearfix hack](http://nicolasgallagher.com/micro-clearfix-hack/)\r\n@mixin pie-clearfix {\r\n  &:after {\r\n    content: \"\";\r\n    display: table;\r\n    clear: both;\r\n  }\r\n  @include has-layout;\r\n}\r\n",
		"@import \"../../support\";\r\n\r\n// The `zoom` approach generates less CSS but does not validate.\r\n// Set this to `block` to use the display-property to hack the\r\n// element to gain layout.\r\n$default-has-layout-approach: zoom !default;\r\n\r\n// This mixin causes an element matching the selector\r\n// to gain the \"hasLayout\" property in internet explorer.\r\n// More information on [hasLayout](http://reference.sitepoint.com/css/haslayout).\r\n@mixin has-layout($approach: $default-has-layout-approach) {\r\n  @if $legacy-support-for-ie {\r\n    @if $approach == zoom {\r\n      @include has-layout-zoom;\r\n    } @else if $approach == block {\r\n      @include has-layout-block;\r\n    } @else {\r\n      @warn \"Unknown has-layout approach: #{$approach}\";\r\n      @include has-layout-zoom;\r\n    }\r\n  }\r\n}\r\n\r\n@mixin has-layout-zoom {\r\n  @if $legacy-support-for-ie6 or $legacy-support-for-ie7 {\r\n    *zoom: 1;\r\n  }\r\n}\r\n\r\n@mixin has-layout-block {\r\n  @if $legacy-support-for-ie {\r\n    // This makes ie6 get layout\r\n    display: inline-block;\r\n    // and this puts it back to block\r\n    & { display: block; }\r\n  }\r\n}\r\n\r\n// A hack to supply IE6 (and below) with a different property value.\r\n// [Read more](http://www.cssportal.com/css-hacks/#in_css-important).\r\n@mixin bang-hack($property, $value, $ie6-value) {\r\n  @if $legacy-support-for-ie6 {\r\n    #{$property}: #{$value} !important;\r\n    #{$property}: #{$ie6-value};\r\n  }\r\n}\r\n",
		"// Usually compass hacks apply to both ie6 & 7 -- set this to false to disable support for both.\r\n$legacy-support-for-ie: true !default;\r\n\r\n// Setting this to false will result in smaller output, but no support for ie6 hacks\r\n$legacy-support-for-ie6: $legacy-support-for-ie !default;\r\n\r\n// Setting this to false will result in smaller output, but no support for ie7 hacks\r\n$legacy-support-for-ie7: $legacy-support-for-ie !default;\r\n\r\n// Setting this to false will result in smaller output, but no support for legacy ie8 hacks\r\n$legacy-support-for-ie8: $legacy-support-for-ie !default;\r\n\r\n// @private\r\n// The user can simply set $legacy-support-for-ie and 6, 7, and 8 will be set accordingly,\r\n// But in case the user set each of those explicitly, we need to sync the value of\r\n// this combined variable.\r\n$legacy-support-for-ie: $legacy-support-for-ie6 or $legacy-support-for-ie7 or $legacy-support-for-ie8;\r\n\r\n// Whether to output legacy support for mozilla.\r\n// Usually this means hacks to support Firefox 3.6 or earlier.\r\n$legacy-support-for-mozilla: true;\r\n\r\n// Support for mozilla in experimental css3 properties (-moz).\r\n$experimental-support-for-mozilla      : true !default;\r\n// Support for webkit in experimental css3 properties (-webkit).\r\n$experimental-support-for-webkit       : true !default;\r\n// Support for webkit's original (non-standard) gradient syntax.\r\n$support-for-original-webkit-gradients : true !default;\r\n// Support for opera in experimental css3 properties (-o).\r\n$experimental-support-for-opera        : true !default;\r\n// Support for microsoft in experimental css3 properties (-ms).\r\n$experimental-support-for-microsoft    : true !default;\r\n// Support for khtml in experimental css3 properties (-khtml).\r\n$experimental-support-for-khtml        : false !default;\r\n// Support for svg in experimental css3 properties.\r\n// Setting this to true might add significant size to your\r\n// generated stylesheets.\r\n$experimental-support-for-svg          : false !default;\r\n// Support for CSS PIE in experimental css3 properties (-pie).\r\n$experimental-support-for-pie          : false !default;\r\n",
		"// This module has moved.\r\n@import \"../../reset/utilities\";\r\n",
		"// Based on [Eric Meyer's reset 2.0](http://meyerweb.com/eric/tools/css/reset/index.html)\r\n// Global reset rules.\r\n// For more specific resets, use the reset mixins provided below\r\n@mixin global-reset {\r\n  html, body, div, span, applet, object, iframe,\r\n  h1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\n  a, abbr, acronym, address, big, cite, code,\r\n  del, dfn, em, img, ins, kbd, q, s, samp,\r\n  small, strike, strong, sub, sup, tt, var,\r\n  b, u, i, center,\r\n  dl, dt, dd, ol, ul, li,\r\n  fieldset, form, label, legend,\r\n  table, caption, tbody, tfoot, thead, tr, th, td,\r\n  article, aside, canvas, details, embed, \r\n  figure, figcaption, footer, header, hgroup, \r\n  menu, nav, output, ruby, section, summary,\r\n  time, mark, audio, video {\r\n    @include reset-box-model;\r\n    @include reset-font; }\r\n  // Unlike Eric's original reset, we reset the html element to be compatible\r\n  // with the vertical rhythm mixins.\r\n  html {\r\n    @include reset-body; }\r\n  ol, ul {\r\n    @include reset-list-style; }\r\n  table {\r\n    @include reset-table; }\r\n  caption, th, td {\r\n    @include reset-table-cell; }\r\n  q, blockquote {\r\n    @include reset-quotation; }\r\n  a img {\r\n    @include reset-image-anchor-border; }\r\n  @include reset-html5; }\r\n\r\n// Reset all elements within some selector scope. To reset the selector itself,\r\n// mixin the appropriate reset mixin for that element type as well. This could be\r\n// useful if you want to style a part of your page in a dramatically different way.\r\n@mixin nested-reset {\r\n  div, span, applet, object, iframe,\r\n  h1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\n  a, abbr, acronym, address, big, cite, code,\r\n  del, dfn, em, img, ins, kbd, q, s, samp,\r\n  small, strike, strong, sub, sup, tt, var,\r\n  b, u, i, center,\r\n  dl, dt, dd, ol, ul, li,\r\n  fieldset, form, label, legend,\r\n  table, caption, tbody, tfoot, thead, tr, th, td,\r\n  article, aside, canvas, details, embed, \r\n  figure, figcaption, footer, header, hgroup, \r\n  menu, nav, output, ruby, section, summary,\r\n  time, mark, audio, video {\r\n    @include reset-box-model;\r\n    @include reset-font; }\r\n  table {\r\n    @include reset-table; }\r\n  caption, th, td {\r\n    @include reset-table-cell; }\r\n  q, blockquote {\r\n    @include reset-quotation; }\r\n  a img {\r\n    @include reset-image-anchor-border; } }\r\n\r\n// Reset the box model measurements.\r\n@mixin reset-box-model {\r\n  margin: 0;\r\n  padding: 0;\r\n  border: 0; }\r\n\r\n// Reset the font and vertical alignment.\r\n@mixin reset-font {\r\n  font: inherit;\r\n  font-size: 100%;\r\n  vertical-align: baseline; }\r\n\r\n// Resets the outline when focus.\r\n// For accessibility you need to apply some styling in its place.\r\n@mixin reset-focus {\r\n  outline: 0; }\r\n\r\n// Reset a body element.\r\n@mixin reset-body {\r\n  line-height: 1; }\r\n\r\n// Reset the list style of an element.\r\n@mixin reset-list-style {\r\n  list-style: none; }\r\n\r\n// Reset a table\r\n@mixin reset-table {\r\n  border-collapse: collapse;\r\n  border-spacing: 0; }\r\n\r\n// Reset a table cell (`th`, `td`)\r\n@mixin reset-table-cell {\r\n  text-align: left;\r\n  font-weight: normal;\r\n  vertical-align: middle; }\r\n\r\n// Reset a quotation (`q`, `blockquote`)\r\n@mixin reset-quotation {\r\n  quotes: none;\r\n  &:before, &:after {\r\n    content: \"\"; \r\n    content: none; } }\r\n\r\n// Resets the border.\r\n@mixin reset-image-anchor-border {\r\n  border: none; }\r\n\r\n// Unrecognized elements are displayed inline.\r\n// This reset provides a basic reset for block html5 elements\r\n// so they are rendered correctly in browsers that don't recognize them\r\n// and reset in browsers that have default styles for them.\r\n@mixin reset-html5 {\r\n  #{elements-of-type(html5-block)} {\r\n    display: block; } }\r\n\r\n// Resets the display of inline and block elements to their default display\r\n// according to their tag type. Elements that have a default display that varies across\r\n// versions of html or browser are not handled here, but this covers the 90% use case.\r\n// Usage Example:\r\n//\r\n//     // Turn off the display for both of these classes\r\n//     .unregistered-only, .registered-only\r\n//       display: none\r\n//     // Now turn only one of them back on depending on some other context.\r\n//     body.registered\r\n//       +reset-display(\".registered-only\")\r\n//     body.unregistered\r\n//       +reset-display(\".unregistered-only\")\r\n@mixin reset-display($selector: \"\", $important: false) {\r\n  #{append-selector(elements-of-type(\"inline\"), $selector)} {\r\n    @if $important {\r\n      display: inline !important; }\r\n    @else {\r\n      display: inline; } }\r\n  #{append-selector(elements-of-type(\"block\"), $selector)} {\r\n    @if $important {\r\n      display: block !important; }\r\n    @else {\r\n      display: block; } } }\r\n",
		"// Implementation of float:left with fix for the\r\n// [double-margin bug in IE5/6](http://www.positioniseverything.net/explorer/doubled-margin.html)\r\n@mixin float-left {\r\n  @include float(left); }\r\n\r\n// Implementation of float:right with fix for the\r\n// [double-margin bug in IE5/6](http://www.positioniseverything.net/explorer/doubled-margin.html)\r\n@mixin float-right {\r\n  @include float(right); }\r\n\r\n// Direction independent float mixin that fixes the\r\n// [double-margin bug in IE5/6](http://www.positioniseverything.net/explorer/doubled-margin.html)\r\n@mixin float($side: left) {\r\n  display: inline;\r\n  float: unquote($side); }\r\n\r\n// Resets floated elements back to their default of `float: none` and defaults\r\n// to `display: block` unless you pass `inline` as an argument\r\n//\r\n// Usage Example:\r\n//\r\n//     body.homepage\r\n//       #footer li\r\n//         +float-left\r\n//     body.signup\r\n//       #footer li\r\n//         +reset-float\r\n@mixin reset-float($display: block) {\r\n  float: none;\r\n  display: $display; }",
		"// makes a list inline.\n\n@mixin inline-list {\n  list-style-type: none;\n  &, & li {\n    margin: 0px;\n    padding: 0px;\n    display: inline;\n  }\n}\n\n// makes an inline list delimited with the passed string.\n// Defaults to making a comma-separated list.\n//\n// Please make note of the browser support issues before using this mixin:\n//\n// use of `content` and `:after` is not fully supported in all browsers.\n// See quirksmode for the [support matrix](http://www.quirksmode.org/css/contents.html#t15)\n//\n// `:last-child` is not fully supported.\n// see quirksmode for the [support matrix](http://www.quirksmode.org/css/contents.html#t29).\n//\n// IE8 ignores rules that are included on the same line as :last-child\n// see http://www.richardscarrott.co.uk/posts/view/ie8-last-child-bug for details\n\n@mixin delimited-list($separator: \", \") {\n  @include inline-list;\n  li {\n    &:after { content: $separator; }\n    &:last-child {\n      &:after { content: \"\"; }\n    }\n    &.last {\n      &:after { content: \"\"; }\n    }\n  }\n}\n\n// See [delimited-list](#mixin-delimited-list)\n// @deprecated\n@mixin comma-delimited-list {\n  @warn \"comma-delimited-list is deprecated. Please use delimited-list instead.\";\n  @include delimited-list;\n}\n",
		"// Inline-Block list layout module.\n//\n// Easy mode using simple descendant li selectors:\n//\n//     ul.nav {\n//       @import inline-block-list;\n//     }\n//\n// Advanced mode:\n// If you need to target the list items using a different selector then use\n// `@include inline-block-list-container` on your ul/ol and\n// `@include inline-block-list-item` on your li. This may help when working\n// on layouts involving nested lists. For example:\n//\n//     ul.nav {\n//       @include inline-block-list-container;\n//       > li {\n//         @include inline-block-list-item;\n//       }\n//     }\n\n@import \"bullets\";\n@import \"horizontal-list\";\n@import \"compass/utilities/general/float\";\n@import \"compass/css3/inline-block\";\n\n// Can be mixed into any selector that target a ul or ol that is meant\n// to have an inline-block layout. Used to implement `inline-block-list`.\n@mixin inline-block-list-container {\n  @include horizontal-list-container; }\n\n// Can be mixed into any li selector that is meant to participate in a horizontal layout.\n// Used to implement `inline-block-list`.\n@mixin inline-block-list-item($padding: false) {\n  @include no-bullet;\n  @include inline-block;\n  white-space: nowrap;\n  @if $padding {\n    padding: {\n      left: $padding;\n      right: $padding;\n    };    \n  }\n}\n\n// A list(ol,ul) that is layed out such that the elements are inline-block and won't wrap.\n@mixin inline-block-list($padding: false) {\n  @include inline-block-list-container;\n  li {\n    @include inline-block-list-item($padding); } }\n",
		"@import \"shared\";\r\n\r\n// Set `$inline-block-alignment` to `none` or `false` to disable the output\r\n// of a vertical-align property in the inline-block mixin.\r\n// Or set it to a legal value for `vertical-align` to change the default.\r\n$inline-block-alignment: middle !default;\r\n\r\n// Provides a cross-browser method to implement `display: inline-block;`\r\n@mixin inline-block($alignment: $inline-block-alignment) {\r\n  @if $legacy-support-for-mozilla {\r\n    display: -moz-inline-stack;\r\n  }\r\n  display: inline-block;\r\n  @if $alignment and $alignment != none {\r\n    vertical-align: $alignment;\r\n  }\r\n  @if $legacy-support-for-ie {\r\n    *vertical-align: auto;\r\n    zoom: 1;\r\n    *display: inline;\r\n  }\r\n}\r\n",
		"@import \"../support\";\r\n\r\n// This mixin provides basic support for CSS3 properties and\r\n// their corresponding experimental CSS2 properties when\r\n// the implementations are identical except for the property\r\n// prefix.\r\n@mixin experimental($property, $value,\r\n  $moz      : $experimental-support-for-mozilla,\r\n  $webkit   : $experimental-support-for-webkit,\r\n  $o        : $experimental-support-for-opera,\r\n  $ms       : $experimental-support-for-microsoft,\r\n  $khtml    : $experimental-support-for-khtml,\r\n  $official : true\r\n) {\r\n  @if $webkit  and $experimental-support-for-webkit    { -webkit-#{$property} : $value; }\r\n  @if $khtml   and $experimental-support-for-khtml     {  -khtml-#{$property} : $value; }\r\n  @if $moz     and $experimental-support-for-mozilla   {    -moz-#{$property} : $value; }\r\n  @if $ms      and $experimental-support-for-microsoft {     -ms-#{$property} : $value; }\r\n  @if $o       and $experimental-support-for-opera     {      -o-#{$property} : $value; }\r\n  @if $official                                        {         #{$property} : $value; }\r\n}\r\n\r\n// Same as experimental(), but for cases when the property is the same and the value is vendorized\r\n@mixin experimental-value($property, $value,\r\n  $moz      : $experimental-support-for-mozilla,\r\n  $webkit   : $experimental-support-for-webkit,\r\n  $o        : $experimental-support-for-opera,\r\n  $ms       : $experimental-support-for-microsoft,\r\n  $khtml    : $experimental-support-for-khtml,\r\n  $official : true\r\n) {\r\n  @if $webkit  and $experimental-support-for-webkit    { #{$property} : -webkit-#{$value}; }\r\n  @if $khtml   and $experimental-support-for-khtml     { #{$property} :  -khtml-#{$value}; }\r\n  @if $moz     and $experimental-support-for-mozilla   { #{$property} :    -moz-#{$value}; }\r\n  @if $ms      and $experimental-support-for-microsoft { #{$property} :     -ms-#{$value}; }\r\n  @if $o       and $experimental-support-for-opera     { #{$property} :      -o-#{$value}; }\r\n  @if $official                                        { #{$property} :         #{$value}; }\r\n}\r\n",
		"@import \"text/ellipsis\";\n@import \"text/nowrap\";\n@import \"text/replacement\";\n@import \"text/force-wrap\";\n",
		"@import \"compass/css3/shared\";\n\n// To get full firefox support, you must install the ellipsis pattern:\n//\n//     compass install compass/ellipsis\n$use-mozilla-ellipsis-binding: false !default;\n\n// This technique, by [Justin Maxwell](http://code404.com/), was originally\n// published [here](http://mattsnider.com/css/css-string-truncation-with-ellipsis/).\n// Firefox implementation by [Rikkert Koppes](http://www.rikkertkoppes.com/thoughts/2008/6/).\n@mixin ellipsis($no-wrap: true) {\n  @if $no-wrap { white-space: nowrap; }\n  overflow: hidden;\n  @include experimental(text-overflow, ellipsis,\n    not -moz,\n    not -webkit,\n    -o,\n    -ms,\n    not -khtml,\n    official\n  );\n  @if $experimental-support-for-mozilla and $use-mozilla-ellipsis-binding {\n    -moz-binding: stylesheet-url(unquote(\"xml/ellipsis.xml#ellipsis\"));    \n  }\n}\n",
		"// When remembering whether or not there's a hyphen in white-space is too hard\n@mixin nowrap { white-space: nowrap; }\n",
		"// Indicates the direction you prefer to move your text\n// when hiding it.\n//\n// `left` is more robust, especially in older browsers.\n// `right` seems have better runtime performance.\n$hide-text-direction: left !default;\n\n// Hides html text and replaces it with an image.\n// If you use this on an inline element, you will need to change the display to block or inline-block.\n// Also, if the size of the image differs significantly from the font size, you'll need to set the width and/or height.\n//\n// Parameters:\n//\n// * `img` -- the relative path from the project image directory to the image, or a url literal.\n// * `x` -- the x position of the background image.\n// * `y` -- the y position of the background image.\n@mixin replace-text($img, $x: 50%, $y: 50%) {\n  @include hide-text;\n  background: {\n    @if is-url($img) {\n      image: $img;\n    } @else {\n      image: image-url($img);\n    }\n    repeat: no-repeat;\n    position: $x $y;\n  };\n}\n\n// Like the `replace-text` mixin, but also sets the width\n// and height of the element according the dimensions of the image.\n//\n// If you set `$inline` to true, then an inline image (data uri) will be used.\n@mixin replace-text-with-dimensions($img, $x: 50%, $y: 50%, $inline: false) {\n  @include replace-text(if($inline, inline-image($img), $img), $x, $y);\n  width: image-width($img);\n  height: image-height($img);\n}\n\n// Hides text in an element so you can see the background.\n//\n// The direction indicates how the text should be moved out of view.\n//\n// See `$hide-text-direction` for more information and to set this globally\n// for your application.\n@mixin hide-text($direction: $hide-text-direction) {\n  @if $direction == left {\n    $approximate-em-value: 12px / 1em;\n    $wider-than-any-screen: -9999em;\n    text-indent: $wider-than-any-screen * $approximate-em-value;\n    overflow: hidden;\n    text-align: left;\n  } @else {\n    // slightly wider than the box prevents issues with inline-block elements\n    text-indent: 110%;\n    white-space: nowrap;\n    overflow: hidden;\n  }\n}\n\n// Hides text in an element by squishing the text into oblivion.\n// Use this if you need to hide text contained in an inline element\n// but still have it read by a screen reader.\n@mixin squish-text {\n  font: 0/0 serif;\n  text-shadow: none;\n  color: transparent;\n}\n",
		"// Prevent long urls and text from breaking layouts\n// [originally from perishablepress.com](http://perishablepress.com/press/2010/06/01/wrapping-content/)\n@mixin force-wrap {\n  white-space: pre;           // CSS 2.0\n  white-space: pre-wrap;      // CSS 2.1\n  white-space: pre-line;      // CSS 3.0\n  white-space: -pre-wrap;     // Opera 4-6\n  white-space: -o-pre-wrap;   // Opera 7\n  white-space: -moz-pre-wrap; // Mozilla\n  white-space: -hp-pre-wrap;  // HP Printers\n  word-wrap: break-word;      // IE 5+\n}\n",
		"@import \"compass/layout/grid-background\";\n\n// The base font size.\n$base-font-size: 16px !default;\n\n// The base line height determines the basic unit of vertical rhythm.\n$base-line-height: 24px !default;\n\n// Set the default border style for rhythm borders.\n$default-rhythm-border-style: solid !default;\n\n// The default font size in all browsers.\n$browser-default-font-size: 16px;\n\n// Set to false if you want to use absolute pixels in sizing your typography.\n$relative-font-sizing: true !default;\n\n// Allows the `adjust-font-size-to` mixin and the `lines-for-font-size` function\n// to round the line height to the nearest half line height instead of the\n// nearest integral line height to avoid large spacing between lines.\n$round-to-nearest-half-line: false !default;\n\n// Ensure there is at least this many pixels\n// of vertical padding above and below the text.\n$min-line-padding: 2px !default;\n\n// $base-font-size but in your output unit of choice.\n// Defaults to 1em when `$relative-font-sizing` is true.\n$font-unit: if($relative-font-sizing, 1em, $base-font-size) !default;\n\n// The basic unit of font rhythm.\n$base-rhythm-unit: $base-line-height / $base-font-size * $font-unit;\n\n// The leader is the amount of whitespace in a line.\n// It might be useful in your calculations.\n$base-leader: ($base-line-height - $base-font-size) * $font-unit / $base-font-size;\n\n// The half-leader is the amount of whitespace above and below a line.\n// It might be useful in your calculations.\n$base-half-leader: $base-leader / 2;\n\n// True if a number has a relative unit.\n@function relative-unit($number) {\n  @return unit($number) == \"%\" or unit($number) == \"em\" or unit($number) == \"rem\"\n}\n\n// True if a number has an absolute unit.\n@function absolute-unit($number) {\n  @return not (relative-unit($number) or unitless($number));\n}\n\n@if $relative-font-sizing and not relative-unit($font-unit) {\n  @warn \"$relative-font-sizing is true but $font-unit is set to #{$font-unit} which is not a relative unit.\";\n}\n\n// Establishes a font baseline for the given font-size.\n@mixin establish-baseline($font-size: $base-font-size) {\n  // IE 6 refuses to resize fonts set in pixels and it weirdly resizes fonts\n  // whose root is set in ems. So we set the root font size in percentages of\n  // the default font size.\n  * html {\n    font-size: 100% * ($font-size / $browser-default-font-size);\n  }\n  html {\n    font-size: $font-size;\n    @include adjust-leading-to(1, if($relative-font-sizing, $font-size, $base-font-size));\n  }\n}\n\n// Resets the line-height to 1 vertical rhythm unit.\n// Does not work on elements whose font-size is different from $base-font-size.\n//\n// @deprecated This mixin will be removed in the next release.\n// Please use the `adjust-leading-to` mixin instead.\n@mixin reset-baseline {\n  @include adjust-leading-to(1, if($relative-font-sizing, $base-font-size, $base-font-size));\n}\n\n// Show a background image that can be used to debug your alignments.\n// Include the $img argument if you would rather use your own image than the\n// Compass default gradient image.\n@mixin debug-vertical-alignment($img: false) {\n  @if $img {\n    background: image-url($img);\n  } @else {\n    @include baseline-grid-background($base-rhythm-unit);\n  }\n}\n\n// Adjust a block to have a different font size and line height to maintain the\n// rhythm. $lines specifies how many multiples of the baseline rhythm each line\n// of this font should use up. It does not have to be an integer, but it\n// defaults to the smallest integer that is large enough to fit the font.\n// Use $from-size to adjust from a font-size other than the base font-size.\n@mixin adjust-font-size-to($to-size, $lines: lines-for-font-size($to-size), $from-size: $base-font-size) {\n  @if not $relative-font-sizing and $from-size != $base-font-size {\n    @warn \"$relative-font-sizing is false but a relative font size was passed to adjust-font-size-to\";\n  }\n  font-size: $font-unit * $to-size / $from-size;\n  @include adjust-leading-to($lines, if($relative-font-sizing, $to-size, $base-font-size));\n}\n\n// Adjust a block to have different line height to maintain the rhythm.\n// $lines specifies how many multiples of the baseline rhythm each line of this\n// font should use up. It does not have to be an integer, but it defaults to the\n// smallest integer that is large enough to fit the font.\n@mixin adjust-leading-to($lines, $font-size: $base-font-size) {\n  line-height: rhythm($lines, $font-size);\n}\n\n// Calculate rhythm units.\n@function rhythm(\n  $lines: 1,\n  $font-size: $base-font-size,\n  $offset: 0\n) {\n  @if not $relative-font-sizing and $font-size != $base-font-size {\n    @warn \"$relative-font-sizing is false but a relative font size was passed to the rhythm function\";\n  }\n  $rhythm: $font-unit * ($lines * $base-line-height - $offset) / $font-size;\n  // Round the pixels down to nearest integer.\n  @if unit($rhythm) == px {\n    $rhythm: floor($rhythm);\n  }\n  @return $rhythm;\n}\n\n// Calculate the minimum multiple of rhythm units needed to contain the font-size.\n@function lines-for-font-size($font-size) {\n  $lines: if($round-to-nearest-half-line,\n              ceil(2 * $font-size / $base-line-height) / 2,\n              ceil($font-size / $base-line-height));\n  @if $lines * $base-line-height - $font-size < $min-line-padding * 2 {\n    $lines: $lines + if($round-to-nearest-half-line, 0.5, 1);\n  }\n  @return $lines;\n}\n\n// Apply leading whitespace. The $property can be margin or padding.\n@mixin leader($lines: 1, $font-size: $base-font-size, $property: margin) {\n  #{$property}-top: rhythm($lines, $font-size);\n}\n\n// Apply leading whitespace as padding.\n@mixin padding-leader($lines: 1, $font-size: $base-font-size) {\n  padding-top: rhythm($lines, $font-size);\n}\n\n// Apply leading whitespace as margin.\n@mixin margin-leader($lines: 1, $font-size: $base-font-size) {\n  margin-top: rhythm($lines, $font-size);\n}\n\n// Apply trailing whitespace. The $property can be margin or padding.\n@mixin trailer($lines: 1, $font-size: $base-font-size, $property: margin) {\n  #{$property}-bottom: rhythm($lines, $font-size);\n}\n\n// Apply trailing whitespace as padding.\n@mixin padding-trailer($lines: 1, $font-size: $base-font-size) {\n  padding-bottom: rhythm($lines, $font-size);\n}\n\n// Apply trailing whitespace as margin.\n@mixin margin-trailer($lines: 1, $font-size: $base-font-size) {\n  margin-bottom: rhythm($lines, $font-size);\n}\n\n// Shorthand mixin to apply whitespace for top and bottom margins and padding.\n@mixin rhythm($leader: 0, $padding-leader: 0, $padding-trailer: 0, $trailer: 0, $font-size: $base-font-size) {\n  @include leader($leader, $font-size);\n  @include padding-leader($padding-leader, $font-size);\n  @include padding-trailer($padding-trailer, $font-size);\n  @include trailer($trailer, $font-size);\n}\n\n// Apply a border and whitespace to any side without destroying the vertical\n// rhythm. The whitespace must be greater than the width of the border.\n@mixin apply-side-rhythm-border($side, $width: 1px, $lines: 1, $font-size: $base-font-size, $border-style: $default-rhythm-border-style) {\n  @if not $relative-font-sizing and $font-size != $base-font-size {\n    @warn \"$relative-font-sizing is false but a relative font size was passed to apply-side-rhythm-border\";\n  }\n  border-#{$side}: {\n    style: $border-style;\n    width: $font-unit * $width / $font-size;\n  };\n  padding-#{$side}: rhythm($lines, $font-size, $offset: $width);\n}\n\n// Apply borders and whitespace equally to all sides.\n@mixin rhythm-borders($width: 1px, $lines: 1, $font-size: $base-font-size, $border-style: $default-rhythm-border-style) {\n  @if not $relative-font-sizing and $font-size != $base-font-size {\n    @warn \"$relative-font-sizing is false but a relative font size was passed to rhythm-borders\";\n  }\n  border: {\n    style: $border-style;\n    width: $font-unit * $width / $font-size;\n  };\n  padding: rhythm($lines, $font-size, $offset: $width);\n}\n\n// Apply a leading border.\n@mixin leading-border($width: 1px, $lines: 1, $font-size: $base-font-size, $border-style: $default-rhythm-border-style) {\n  @include apply-side-rhythm-border(top, $width, $lines, $font-size, $border-style);\n}\n\n// Apply a trailing border.\n@mixin trailing-border($width: 1px, $lines: 1, $font-size: $base-font-size, $border-style: $default-rhythm-border-style) {\n  @include apply-side-rhythm-border(bottom, $width, $lines, $font-size, $border-style);\n}\n\n// Apply both leading and trailing borders.\n@mixin horizontal-borders($width: 1px, $lines: 1, $font-size: $base-font-size, $border-style: $default-rhythm-border-style) {\n  @include leading-border($width, $lines, $font-size, $border-style);\n  @include trailing-border($width, $lines, $font-size, $border-style);\n}\n\n// Alias for `horizontal-borders` mixin.\n@mixin h-borders($width: 1px, $lines: 1, $font-size: $base-font-size, $border-style: $default-rhythm-border-style) {\n  @include horizontal-borders($width, $lines, $font-size, $border-style);\n}\n",
		"@import \"../css3/images\";\r\n@import \"../css3/background-size\";\r\n\r\n// Set the color of your columns\r\n$grid-background-column-color     : rgba(100, 100, 225, 0.25)   !default;\r\n// Set the color of your gutters\r\n$grid-background-gutter-color     : rgba(0, 0, 0, 0)            !default;\r\n\r\n// Set the total number of columns in your grid\r\n$grid-background-total-columns    : 24                          !default;\r\n// Set the width of your columns\r\n$grid-background-column-width     : 30px                        !default;\r\n// Set the width of your gutters\r\n$grid-background-gutter-width     : 10px                        !default;\r\n// Set the offset, if your columns are padded in from the container edge\r\n$grid-background-offset           : 0px                         !default;\r\n\r\n// Set the color of your baseline\r\n$grid-background-baseline-color   : rgba(0, 0, 0, 0.5)          !default;\r\n// Set the height of your baseline grid\r\n$grid-background-baseline-height  : 1.5em                       !default;\r\n\r\n// toggle your columns grids on and off\r\n$show-column-grid-backgrounds     : true                        !default;\r\n// toggle your vertical grids on and off\r\n$show-baseline-grid-backgrounds   : true                        !default;\r\n// toggle all your grids on and off\r\n$show-grid-backgrounds            : true                        !default;\r\n\r\n// optionally force your grid-image to remain fluid\r\n// no matter what units you used to declared your grid.\r\n$grid-background-force-fluid      : false                       !default;\r\n\r\n\r\n// Create the gradient needed for baseline grids\r\n@function get-baseline-gradient(\r\n  $color : $grid-background-baseline-color\r\n) {\r\n  $gradient: linear-gradient(bottom, $color 5%, rgba($color,0) 5%);\r\n  @return $gradient;\r\n}\r\n\r\n// Create the color-stops needed for horizontal grids\r\n@function build-grid-background(\r\n  $total          : $grid-background-total-columns,\r\n  $column         : $grid-background-column-width,\r\n  $gutter         : $grid-background-gutter-width,\r\n  $offset         : $grid-background-offset,\r\n  $column-color   : $grid-background-column-color,\r\n  $gutter-color   : $grid-background-gutter-color\r\n) {\r\n  $grid: compact();\r\n  $grid: append($grid, $gutter-color $offset, comma);\r\n  @for $i from 0 to $total {\r\n\r\n    // $a represents the start of this column, initially equal to the offset\r\n    $a: $offset;\r\n    @if $i > 0 { $a: $a + (($column + $gutter) * $i); }\r\n\r\n    // $g represents the start of this gutter, equal to $a plus one column-width\r\n    $g: $a + $column;\r\n\r\n    // $z represents the end of a gutter, equal to $g plus one gutter-width\r\n    $z: $g + $gutter;\r\n\r\n    @if (unit($a) == \"%\") and ($i == ($total - 1)) {\r\n      $z: 100%;\r\n    }\r\n\r\n    // and we add this column/gutter pair to our grid\r\n    $grid: join($grid, ($column-color $a, $column-color $g, $gutter-color $g, $gutter-color $z));\r\n  }\r\n\r\n  @return $grid;\r\n}\r\n\r\n// Return the gradient needed for horizontal grids\r\n@function get-column-gradient(\r\n  $total          : $grid-background-total-columns,\r\n  $column         : $grid-background-column-width,\r\n  $gutter         : $grid-background-gutter-width,\r\n  $offset         : $grid-background-offset,\r\n  $column-color   : $grid-background-column-color,\r\n  $gutter-color   : $grid-background-gutter-color,\r\n  $force-fluid    : $grid-background-force-fluid\r\n) {\r\n  $grid: unquote(\"\");\r\n\r\n  // don't force fluid grids when they are already fluid.\r\n  @if unit($column) == \"%\" { $force-fluid: false; }\r\n\r\n  @if $force-fluid {\r\n    $grid: get-column-fluid-grid($total,$column,$gutter,$offset,$column-color,$gutter-color);\r\n  } @else {\r\n    $grid: build-grid-background($total,$column,$gutter,$offset,$column-color,$gutter-color);\r\n  }\r\n\r\n  // return the horizontal grid as a gradient\r\n  $gradient: linear-gradient(left, $grid);\r\n  @return $gradient;\r\n}\r\n\r\n// Convert a grid from fixed units into percentages.\r\n@function get-column-fluid-grid(\r\n  $total          : $grid-background-total-columns,\r\n  $column         : $grid-background-column-width,\r\n  $gutter         : $grid-background-gutter-width,\r\n  $offset         : $grid-background-offset,\r\n  $column-color   : $grid-background-column-color,\r\n  $gutter-color   : $grid-background-gutter-color\r\n) {\r\n  $context: ($column * $total) + ($gutter * ($total - 1) + ($offset * 2));\r\n  $offset: $offset / $context * 100%;\r\n  $column: $column / $context * 100%;\r\n  $gutter: $gutter / $context * 100%;\r\n\r\n  // return the horizontal grid as a set of color-stops\r\n  $grid: build-grid-background($total,$column,$gutter,$offset,$column-color,$gutter-color);\r\n  @return $grid;\r\n}\r\n\r\n\r\n// Add just the baseline grid to an element's background\r\n@mixin baseline-grid-background(\r\n  $baseline : $grid-background-baseline-height,\r\n  $color    : $grid-background-baseline-color\r\n) {\r\n  @if $show-grid-backgrounds and $show-baseline-grid-backgrounds {\r\n    @include background-image(get-baseline-gradient($color));\r\n    @include background-size(100% $baseline);\r\n    background-position: left top;\r\n  }\r\n}\r\n\r\n// Add just the horizontal grid to an element's background\r\n@mixin column-grid-background(\r\n  $total          : $grid-background-total-columns,\r\n  $column         : $grid-background-column-width,\r\n  $gutter         : $grid-background-gutter-width,\r\n  $offset         : $grid-background-offset,\r\n  $column-color   : $grid-background-column-color,\r\n  $gutter-color   : $grid-background-gutter-color,\r\n  $force-fluid    : $grid-background-force-fluid\r\n) {\r\n  @if $show-grid-backgrounds and $show-column-grid-backgrounds {\r\n    @include background-image(\r\n      get-column-gradient($total,$column,$gutter,$offset,$column-color,$gutter-color, $force-fluid)\r\n    );\r\n    background-position: left top;\r\n  }\r\n}\r\n\r\n// Add both horizontal and baseline grids to an element's background\r\n@mixin grid-background(\r\n  $total          : $grid-background-total-columns,\r\n  $column         : $grid-background-column-width,\r\n  $gutter         : $grid-background-gutter-width,\r\n  $baseline       : $grid-background-baseline-height,\r\n  $offset         : $grid-background-offset,\r\n  $column-color   : $grid-background-column-color,\r\n  $gutter-color   : $grid-background-gutter-color,\r\n  $baseline-color : $grid-background-baseline-color,\r\n  $force-fluid    : $grid-background-force-fluid\r\n) {\r\n  @if $show-grid-backgrounds {\r\n    @if $show-baseline-grid-backgrounds and $show-column-grid-backgrounds {\r\n      @include background-image(\r\n        get-baseline-gradient($baseline-color),\r\n        get-column-gradient($total,$column,$gutter,$offset,$column-color,$gutter-color, $force-fluid)\r\n      );\r\n      @include background-size(100% $baseline, auto);\r\n      background-position: left top;\r\n    } @else {\r\n      @include baseline-grid-background($baseline, $baseline-color);\r\n      @include column-grid-background($total,$column,$gutter,$offset,$column-color,$gutter-color, $force-fluid);\r\n    }\r\n  }\r\n}\r\n",
		"@import \"shared\";\r\n@import \"../utilities/general/hacks\";\r\n@import \"../functions\";\r\n\r\n// Background property support for vendor prefixing within values.\r\n@mixin background(\r\n  $background-1,\r\n  $background-2: false,\r\n  $background-3: false,\r\n  $background-4: false,\r\n  $background-5: false,\r\n  $background-6: false,\r\n  $background-7: false,\r\n  $background-8: false,\r\n  $background-9: false,\r\n  $background-10: false\r\n) {\r\n  $backgrounds: compact($background-1, $background-2, $background-3, $background-4, $background-5,\r\n                        $background-6, $background-7, $background-8, $background-9, $background-10);\r\n  $mult-bgs: -compass-list-size($backgrounds) > 1;\r\n  $add-pie-bg: prefixed(-pie,   $backgrounds) or $mult-bgs;\r\n  @if $experimental-support-for-svg          and prefixed(-svg,    $backgrounds) {      background:    -svg($backgrounds); }\r\n  @if $support-for-original-webkit-gradients and prefixed(-owg,    $backgrounds) {      background:    -owg($backgrounds); }\r\n  @if $experimental-support-for-webkit       and prefixed(-webkit, $backgrounds) {      background: -webkit($backgrounds); }\r\n  @if $experimental-support-for-mozilla      and prefixed(-moz,    $backgrounds) {      background:    -moz($backgrounds); }\r\n  @if $experimental-support-for-opera        and prefixed(-o,      $backgrounds) {      background:      -o($backgrounds); }\r\n  @if $experimental-support-for-pie          and $add-pie-bg                     { -pie-background:    -pie($backgrounds); }\r\n                                                                                        background:         $backgrounds ;\r\n}\r\n\r\n@mixin background-with-css2-fallback(\r\n  $background-1,\r\n  $background-2: false,\r\n  $background-3: false,\r\n  $background-4: false,\r\n  $background-5: false,\r\n  $background-6: false,\r\n  $background-7: false,\r\n  $background-8: false,\r\n  $background-9: false,\r\n  $background-10: false\r\n) {\r\n  $backgrounds: compact($background-1, $background-2, $background-3, $background-4, $background-5,\r\n                        $background-6, $background-7, $background-8, $background-9, $background-10);\r\n  $mult-bgs: -compass-list-size($backgrounds) > 1;\r\n  $simple-background: if($mult-bgs or prefixed(-css2, $backgrounds), -css2(-compass-nth($backgrounds, last)), false);\r\n  @if not(blank($simple-background)) { background: $simple-background; }\r\n  @include background($background-1, $background-2, $background-3, $background-4, $background-5,\r\n                      $background-6, $background-7, $background-8, $background-9, $background-10);\r\n}\r\n\r\n\r\n// Background image property support for vendor prefixing within values.\r\n@mixin background-image(\r\n  $image-1,\r\n  $image-2: false,\r\n  $image-3: false,\r\n  $image-4: false,\r\n  $image-5: false,\r\n  $image-6: false,\r\n  $image-7: false,\r\n  $image-8: false,\r\n  $image-9: false,\r\n  $image-10: false\r\n) {\r\n  $images: compact($image-1, $image-2, $image-3, $image-4, $image-5, $image-6, $image-7, $image-8, $image-9, $image-10);\r\n  $add-pie-bg: prefixed(-pie,   $images) or -compass-list-size($images) > 1;\r\n\r\n  @if $experimental-support-for-svg          and prefixed(-svg,    $images) { background-image:    -svg($images); background-size: 100%; }\r\n  @if $support-for-original-webkit-gradients and prefixed(-owg,    $images) { background-image:    -owg($images); }\r\n  @if $experimental-support-for-webkit       and prefixed(-webkit, $images) { background-image: -webkit($images); }\r\n  @if $experimental-support-for-mozilla      and prefixed(-moz,    $images) { background-image:    -moz($images); }\r\n  @if $experimental-support-for-opera        and prefixed(-o,      $images) { background-image:      -o($images); }\r\n  @if $experimental-support-for-pie          and $add-pie-bg                { @warn \"PIE does not support background-image. Use @include background(#{$images}) instead.\" }\r\n                                                                              background-image:         $images ;\r\n}\r\n\r\n// Emit a IE-Specific filters that renders a simple linear gradient.\r\n// For use in IE 6 - 8. Best practice would have you apply this via a\r\n// conditional IE stylesheet, but if you must, you should place this before\r\n// any background-image properties that you have specified.\r\n//\r\n// For the `$orientation` parameter, you can pass `vertical` or `horizontal`.\r\n@mixin filter-gradient($start-color, $end-color, $orientation: vertical) {\r\n  @include has-layout;\r\n  $gradient-type: if($orientation == vertical, 0, 1);\r\n  @if $legacy-support-for-ie6 or $legacy-support-for-ie7 or $legacy-support-for-ie8 {\r\n    filter: progid:DXImageTransform.Microsoft.gradient(gradientType=#{$gradient-type}, startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}');\r\n  }\r\n}\r\n\r\n\r\n// Border image property support for vendor prefixing properties and values.\r\n@mixin border-image($value) {\r\n  @if $experimental-support-for-mozilla      {    -moz-border-image:    -moz(reject(-compass-list($value), fill)); }\r\n  @if $support-for-original-webkit-gradients { -webkit-border-image:    -owg(reject(-compass-list($value), fill)); }\r\n  @if $experimental-support-for-webkit       { -webkit-border-image: -webkit(reject(-compass-list($value), fill)); }\r\n  @if $experimental-support-for-opera        {      -o-border-image:      -o(reject(-compass-list($value), fill)); }\r\n  @if $experimental-support-for-svg          {         border-image:    -svg(reject(-compass-list($value), fill)); }\r\n                                                       border-image:                              $value;\r\n}\r\n\r\n// List style image property support for vendor prefixing within values.\r\n@mixin list-style-image($image) {\r\n  @if $experimental-support-for-mozilla      and prefixed(-moz,    $image) { list-style-image:    -moz($image); }\r\n  @if $support-for-original-webkit-gradients and prefixed(-owg,    $image) { list-style-image:    -owg($image); }\r\n  @if $experimental-support-for-webkit       and prefixed(-webkit, $image) { list-style-image: -webkit($image); }\r\n  @if $experimental-support-for-opera        and prefixed(-o,      $image) { list-style-image:      -o($image); }\r\n  @if $experimental-support-for-svg          and prefixed(-svg,    $image) { list-style-image:    -svg($image); }\r\n                                                                             list-style-image:         $image ;\r\n}\r\n\r\n// List style property support for vendor prefixing within values.\r\n@mixin list-style($value) {\r\n  $value: -compass-list($value);\r\n  @if $experimental-support-for-mozilla      and prefixed(-moz,    $value) { list-style-image:    -moz($value); }\r\n  @if $support-for-original-webkit-gradients and prefixed(-owg,    $value) { list-style-image:    -owg($value); }\r\n  @if $experimental-support-for-webkit       and prefixed(-webkit, $value) { list-style-image: -webkit($value); }\r\n  @if $experimental-support-for-opera        and prefixed(-o,      $value) { list-style-image:      -o($value); }\r\n  @if $experimental-support-for-svg          and prefixed(-svg,    $value) { list-style-image:    -svg($value); }\r\n                                                                             list-style-image:         $value ;\r\n}\r\n\r\n// content property support for vendor prefixing within values.\r\n@mixin content($value) {\r\n  $value: -compass-list($value);\r\n  @if $experimental-support-for-mozilla      and prefixed(-moz,    $value) { content:    -moz($value); }\r\n  @if $support-for-original-webkit-gradients and prefixed(-owg,    $value) { content:    -owg($value); }\r\n  @if $experimental-support-for-webkit       and prefixed(-webkit, $value) { content: -webkit($value); }\r\n  @if $experimental-support-for-opera        and prefixed(-o,      $value) { content:      -o($value); }\r\n  @if $experimental-support-for-svg          and prefixed(-svg,    $value) { content:    -svg($value); }\r\n                                                                             content:         $value ;\r\n}\r\n",
		"@import \"functions/lists\";\r\n@import \"functions/cross_browser_support\";\r\n@import \"functions/gradient_support\";\r\n@import \"functions/constants\";\r\n@import \"functions/display\";\r\n@import \"functions/colors\";\r\n",
		"//\r\n// A partial implementation of the Ruby list functions from Compass:\r\n// https://github.com/Compass/compass/blob/stable/lib/compass/sass_extensions/functions/lists.rb\r\n//\r\n\r\n\r\n// compact is part of libsass\r\n\r\n@function -compass-nth($list, $place) {\r\n  // Yep, Sass-lists are 1-indexed.\r\n  @if $place == \"first\" {\r\n    $place: 1;\r\n  }\r\n  @if $place == \"last\" {\r\n    $place: length($list);\r\n  }\r\n  @return nth($list, $place);\r\n}\r\n\r\n// compass_list can't be implemented in sass script\r\n\r\n@function -compass-space-list($item1, $item2:null, $item3:null, $item4:null, $item5:null, $item6:null, $item7:null, $item8:null, $item9:null) {\r\n  $items: ();\r\n  // Support for polymorphism.\r\n  @if type-of($item1) == 'list' {\r\n    // Passing a single array of properties.\r\n    $items: $item1;\r\n  } @else {\r\n    $items: $item1 $item2 $item3 $item4 $item5 $item6 $item7 $item8 $item9;\r\n  }\r\n\r\n  $full: first-value-of($items);\r\n\r\n  @for $i from 2 through length($items) {\r\n    $item: nth($items, $i);\r\n    @if $item != null {\r\n      $full: $full $item;\r\n    }\r\n  }\r\n\r\n  @return $full;\r\n}\r\n\r\n@function -compass-list-size($list) {\r\n  @return length($list);\r\n}\r\n\r\n@function -compass-slice($list, $start, $end: false) {\r\n  @if $end == false {\r\n    $end: length($list);\r\n  }\r\n  $full: nth($list, $start);\r\n  @for $i from $start + 1 through $end {\r\n    $full: $full, nth($list, $i);\r\n  }\r\n  @return $full;\r\n}\r\n\r\n@function reject($list, $reject1, $reject2:null, $reject3:null, $reject4:null, $reject5:null, $reject6:null, $reject7:null, $reject8:null, $reject9:null) {\r\n  $rejects: $reject1, $reject2, $reject3, $reject4, $reject5, $reject6, $reject7, $reject8, $reject9;\r\n\r\n  $full: false;\r\n  @each $item in $list {\r\n    @if index($rejects, $item) {}\r\n    @else {\r\n      @if $full {\r\n        $full: $full, $item;\r\n      }\r\n      @else {\r\n        $full: $item;\r\n      }\r\n    }\r\n  }\r\n  @return $full;\r\n}\r\n\r\n@function first-value-of($list) {\r\n  @return nth($list, 1);\r\n}\r\n\r\n@function compact($vars...) {\r\n  $separator: list-separator($vars);\r\n  $list: ();\r\n  @each $var in $vars {\r\n      @if $var {\r\n          $list: append($list, $var, $separator);\r\n      }\r\n  }\r\n  @return $list;\r\n}\r\n",
		"// \r\n// A partial implementation of the Ruby cross browser support functions from Compass:\r\n// https://github.com/Compass/compass/blob/stable/lib/compass/sass_extensions/functions/cross_browser_support.rb\r\n// \r\n\r\n@function prefixed($prefix, $property1, $property2:null, $property3:null, $property4:null, $property5:null, $property6:null, $property7:null, $property8:null, $property9:null) {\r\n  $properties: $property1, $property2, $property3, $property4, $property5, $property6, $property7, $property8, $property9;\r\n  $prefixed: false;\r\n  @each $item in $properties {\r\n    @if type-of($item) == 'string' {\r\n      $prefixed: $prefixed or str-index($item, 'url') != 1 and str-index($item, 'rgb') != 1 and str-index($item, '#') != 1;\r\n    } @elseif type-of($item) == 'color' {\r\n    } @elseif $item != null {\r\n      $prefixed: true;\r\n    }\r\n  }\r\n  @return $prefixed;\r\n}\r\n\r\n@function prefix($prefix, $property1, $property2:null, $property3:null, $property4:null, $property5:null, $property6:null, $property7:null, $property8:null, $property9:null) {\r\n  $properties: \"\";\r\n\r\n  // Support for polymorphism.\r\n  @if type-of($property1) == 'list' {\r\n    // Passing a single array of properties.\r\n    $properties: $property1;\r\n  } @else {\r\n    // Passing multiple properties.\r\n    $properties: $property1, $property2, $property3, $property4, $property5, $property6, $property7, $property8, $property9;\r\n  }\r\n\r\n  $props: false;\r\n  @each $item in $properties {\r\n    @if $item == null {}\r\n    @else {\r\n      @if prefixed($prefix, $item) {\r\n        $item: #{$prefix}-#{$item};\r\n      }\r\n      @if $props {\r\n        $props: $props, $item;\r\n      }\r\n      @else {\r\n        $props: $item;\r\n      }\r\n    }\r\n  }\r\n  @return $props;\r\n}\r\n\r\n@function -svg($property1, $property2:null, $property3:null, $property4:null, $property5:null, $property6:null, $property7:null, $property8:null, $property9:null) {\r\n  @return prefix('-svg', $property1, $property2, $property3, $property4, $property5, $property6, $property7, $property8, $property9);\r\n}\r\n\r\n@function -owg($property1, $property2:null, $property3:null, $property4:null, $property5:null, $property6:null, $property7:null, $property8:null, $property9:null) {\r\n  @return prefix('-owg', $property1, $property2, $property3, $property4, $property5, $property6, $property7, $property8, $property9);\r\n}\r\n\r\n@function -webkit($property1, $property2:null, $property3:null, $property4:null, $property5:null, $property6:null, $property7:null, $property8:null, $property9:null) {\r\n  @return prefix('-webkit', $property1, $property2, $property3, $property4, $property5, $property6, $property7, $property8, $property9);\r\n}\r\n\r\n@function -moz($property1, $property2:null, $property3:null, $property4:null, $property5:null, $property6:null, $property7:null, $property8:null, $property9:null) {\r\n  @return prefix('-moz', $property1, $property2, $property3, $property4, $property5, $property6, $property7, $property8, $property9);\r\n}\r\n\r\n@function -o($property1, $property2:null, $property3:null, $property4:null, $property5:null, $property6:null, $property7:null, $property8:null, $property9:null) {\r\n  @return prefix('-o', $property1, $property2, $property3, $property4, $property5, $property6, $property7, $property8, $property9);\r\n}\r\n\r\n@function -pie($property1, $property2:null, $property3:null, $property4:null, $property5:null, $property6:null, $property7:null, $property8:null, $property9:null) {\r\n  @return prefix('-pie', $property1, $property2, $property3, $property4, $property5, $property6, $property7, $property8, $property9);\r\n}\r\n",
		"// \r\n// A partial implementation of the Ruby gradient support functions from Compass:\r\n// https://github.com/Compass/compass/blob/v0.12.2/lib/compass/sass_extensions/functions/gradient_support.rb\r\n// \r\n\r\n@function color-stops($item1, $item2:null, $item3:null, $item4:null, $item5:null, $item6:null, $item7:null, $item8:null, $item9:null) {\r\n  $items: $item2, $item3, $item4, $item5, $item6, $item7, $item8, $item9;\r\n  $full: $item1;\r\n  @each $item in $items {\r\n    @if $item != null {\r\n      $full: $full, $item;\r\n    }    \r\n  }\r\n  @return $full;\r\n}",
		"// \r\n// A partial implementation of the Ruby constants functions from Compass:\r\n// https://github.com/Compass/compass/blob/stable/lib/compass/sass_extensions/functions/constants.rb\r\n// \r\n\r\n@function opposite-position($from) {\r\n    @if ($from == top) {\r\n        @return bottom;\r\n    } @else if ($from == bottom) {\r\n        @return top;\r\n    } @else if ($from == left) {\r\n        @return right;\r\n    } @else if ($from == right) {\r\n        @return left;\r\n    } @else if ($from == center) {\r\n        @return center;\r\n    }\r\n}\r\n",
		"// \r\n// A partial implementation of the Ruby display functions from Compass:\r\n// https://github.com/Compass/compass/blob/stable/core/lib/compass/core/sass_extensions/functions/display.rb\r\n// \r\n\r\n@function elements-of-type($type){\r\n    @if ($type == block){\r\n        @return address, article, aside, blockquote, center, dir, div, dd, details, dl, dt, fieldset, figcaption, figure, form, footer, frameset, h1, h2, h3, h4, h5, h6, hr, header, hgroup, isindex, main, menu, nav, noframes, noscript, ol, p, pre, section, summary, ul;\r\n    } @else if ($type == inline){\r\n        @return a, abbr, acronym, audio, b, basefont, bdo, big, br, canvas, cite, code, command, datalist, dfn, em, embed, font, i, img, input, keygen, kbd, label, mark, meter, output, progress, q, rp, rt, ruby, s, samp, select, small, span, strike, strong, sub, sup, textarea, time, tt, u, var, video, wbr;\r\n    } @else if ($type == inline-block){\r\n        @return img;\r\n    } @else if ($type == table){\r\n        @return table;\r\n    } @else if ($type == list-item){\r\n        @return li;\r\n    } @else if ($type == table-row-group){\r\n        @return tbody;\r\n    } @else if ($type == table-header-group){\r\n        @return thead;\r\n    } @else if ($type == table-footer-group){\r\n        @return tfoot;\r\n    } @else if ($type == table-row){\r\n        @return tr;\r\n    } @else if ($type == table-cell){\r\n        @return th, td;\r\n    } @else if ($type == html5-block){\r\n        @return article, aside, details, figcaption, figure, footer, header, hgroup, main, menu, nav, section, summary;\r\n    } @else if ($type == html5-inline){\r\n        @return audio, canvas, command, datalist, embed, keygen, mark, meter, output, progress, rp, rt, ruby, time, video, wbr;\r\n    } @else if ($type == html5){\r\n        @return article, aside, audio, canvas, command, datalist, details, embed, figcaption, figure, footer, header, hgroup, keygen, main, mark, menu, meter, nav, output, progress, rp, rt, ruby, section, summary, time, video, wbr;\r\n    } @else if ($type == text-input){\r\n        @return input, textarea;\r\n    }\r\n}\r\n",
		"// \r\n// A partial implementation of the Ruby colors functions from Compass:\r\n// https://github.com/Compass/compass/blob/stable/core/lib/compass/core/sass_extensions/functions/colors.rb\r\n//\r\n\r\n// a genericized version of lighten/darken so that negative values can be used.\r\n@function adjust-lightness($color, $amount) {\r\n    @return adjust-color($color, $lightness: $amount);\r\n}\r\n\r\n// Scales a color's lightness by some percentage.\r\n// If the amount is negative, the color is scaled darker, if positive, it is scaled lighter.\r\n// This will never return a pure light or dark color unless the amount is 100%.\r\n@function scale-lightness($color, $amount) {\r\n    @return scale-color($color, $lightness: $amount);\r\n}\r\n\r\n// a genericized version of saturate/desaturate so that negative values can be used.\r\n@function adjust-saturation($color, $amount) {\r\n    @return adjust-color($color, $saturation: $amount);\r\n}\r\n\r\n// Scales a color's saturation by some percentage.\r\n// If the amount is negative, the color is desaturated, if positive, it is saturated.\r\n// This will never return a pure saturated or desaturated color unless the amount is 100%.\r\n@function scale-saturation($color, $amount) {\r\n    @return scale-color($color, $saturation: $amount);\r\n}\r\n\r\n@function shade($color, $percentage) {\r\n    @return mix(#000000, $color, $percentage);\r\n}\r\n\r\n@function tint($color, $percentage) {\r\n    @return mix(#ffffff, $color, $percentage);\r\n}\r\n\r\n",
		"@import \"shared\";\r\n\r\n//  override to change the default\r\n$default-background-size: 100% auto !default;\r\n\r\n// Set the size of background images using px, width and height, or percentages.\r\n// Currently supported in: Opera, Gecko, Webkit.\r\n//\r\n// * percentages are relative to the background-origin (default = padding-box)\r\n// * mixin defaults to: `$default-background-size`\r\n@mixin background-size(\r\n  $size-1: $default-background-size,\r\n  $size-2: false,\r\n  $size-3: false,\r\n  $size-4: false,\r\n  $size-5: false,\r\n  $size-6: false,\r\n  $size-7: false,\r\n  $size-8: false,\r\n  $size-9: false,\r\n  $size-10: false\r\n) {\r\n  $size-1: if(type-of($size-1) == string, unquote($size-1), $size-1);\r\n  $sizes: compact($size-1, $size-2, $size-3, $size-4, $size-5, $size-6, $size-7, $size-8, $size-9, $size-10);\r\n  @include experimental(background-size, $sizes, -moz, -webkit, -o, not(-ms), not(-khtml));\r\n}\r\n"
	],
	"mappings": "",
	"names": []
}