{
	"version": 3,
	"file": "../../../../../sass/scssphp-compass-master/stylesheets/compass/css3/transform-legacy.css",
	"sources": [
		"../../../../../sass/scssphp-compass-master/stylesheets/compass/css3/transform-legacy.scss",
		"../../../../../sass/scssphp-compass-master/stylesheets/compass/css3/shared.scss",
		"../../../../../../../../../../../Desktop/Scout-App/bower_components/compass-mixins/lib/compass/_support.scss"
	],
	"sourcesContent": [
		"@import \"shared\";\n\n@warn \"This version of the transform module has been deprecated and will be removed.\";\n\n// CSS Transform and Transform-Origin\n\n// Apply a transform sent as a complete string.\n\n@mixin apply-transform($transform) {\n  @include experimental(transform, $transform,\n    -moz, -webkit, -o, not -ms, not -khtml, official\n  );\n}\n\n// Apply a transform-origin sent as a complete string.\n\n@mixin apply-origin($origin) {\n  @include experimental(transform-origin, $origin,\n    -moz, -webkit, -o, not -ms, not -khtml, official\n  );\n}\n\n// transform-origin requires x and y coordinates\n//\n// * only applies the coordinates if they are there so that it can be called by scale, rotate and skew safely\n\n@mixin transform-origin($originx: 50%, $originy: 50%) {\n  @if $originx or $originy {\n    @if $originy {\n       @include apply-origin($originx or 50% $originy);\n     } @else {\n       @include apply-origin($originx);\n     }\n  }\n} \n\n// A full transform mixin with everything you could want\n//\n// * including origin adjustments if you want them\n// * scale, rotate and skew require units of degrees(deg)\n// * scale takes a multiplier, rotate and skew take degrees\n\n@mixin transform(\n  $scale: 1,\n  $rotate: 0deg,\n  $transx: 0,\n  $transy: 0,\n  $skewx: 0deg,\n  $skewy: 0deg,\n  $originx: false,\n  $originy: false\n) {\n  $transform : scale($scale) rotate($rotate) translate($transx, $transy) skew($skewx, $skewy);\n  @include apply-transform($transform);\n  @include transform-origin($originx, $originy);\n}\n\n// Transform Partials\n//\n// These work well on their own, but they don't add to each other, they override.\n// Use them with extra origin args, or along side +transform-origin\n\n// Adjust only the scale, with optional origin coordinates\n\n@mixin scale($scale: 1.25, $originx: false, $originy: false) {\n  @include apply-transform(scale($scale));\n  @include transform-origin($originx, $originy);\n}\n\n// Adjust only the rotation, with optional origin coordinates\n\n@mixin rotate($rotate: 45deg, $originx: false, $originy: false) {\n  @include apply-transform(rotate($rotate));\n  @include transform-origin($originx, $originy);\n}\n\n// Adjust only the translation\n\n@mixin translate($transx: 0, $transy: 0) {\n  @include apply-transform(translate($transx, $transy));\n}\n\n// Adjust only the skew, with optional origin coordinates\n@mixin skew($skewx: 0deg, $skewy: 0deg, $originx: false, $originy: false) {\n  @include apply-transform(skew($skewx, $skewy));\n  @include transform-origin($originx, $originy);\n}\n",
		"@import \"compass/support\";\n\n// This mixin provides basic support for CSS3 properties and\n// their corresponding experimental CSS2 properties when\n// the implementations are identical except for the property\n// prefix.\n@mixin experimental($property, $value,\n  $moz      : $experimental-support-for-mozilla,\n  $webkit   : $experimental-support-for-webkit,\n  $o        : $experimental-support-for-opera,\n  $ms       : $experimental-support-for-microsoft,\n  $khtml    : $experimental-support-for-khtml,\n  $official : true\n) {\n  @if $webkit  and $experimental-support-for-webkit    { -webkit-#{$property} : $value; }\n  @if $khtml   and $experimental-support-for-khtml     {  -khtml-#{$property} : $value; }\n  @if $moz     and $experimental-support-for-mozilla   {    -moz-#{$property} : $value; }\n  @if $ms      and $experimental-support-for-microsoft {     -ms-#{$property} : $value; }\n  @if $o       and $experimental-support-for-opera     {      -o-#{$property} : $value; }\n  @if $official                                        {         #{$property} : $value; }\n}\n\n// Same as experimental(), but for cases when the property is the same and the value is vendorized\n@mixin experimental-value($property, $value,\n  $moz      : $experimental-support-for-mozilla,\n  $webkit   : $experimental-support-for-webkit,\n  $o        : $experimental-support-for-opera,\n  $ms       : $experimental-support-for-microsoft,\n  $khtml    : $experimental-support-for-khtml,\n  $official : true\n) {\n  @if $webkit  and $experimental-support-for-webkit    { #{$property} : -webkit-#{$value}; }\n  @if $khtml   and $experimental-support-for-khtml     { #{$property} :  -khtml-#{$value}; }\n  @if $moz     and $experimental-support-for-mozilla   { #{$property} :    -moz-#{$value}; }\n  @if $ms      and $experimental-support-for-microsoft { #{$property} :     -ms-#{$value}; }\n  @if $o       and $experimental-support-for-opera     { #{$property} :      -o-#{$value}; }\n  @if $official                                        { #{$property} :         #{$value}; }\n}\n",
		"// Usually compass hacks apply to both ie6 & 7 -- set this to false to disable support for both.\r\n$legacy-support-for-ie: true !default;\r\n\r\n// Setting this to false will result in smaller output, but no support for ie6 hacks\r\n$legacy-support-for-ie6: $legacy-support-for-ie !default;\r\n\r\n// Setting this to false will result in smaller output, but no support for ie7 hacks\r\n$legacy-support-for-ie7: $legacy-support-for-ie !default;\r\n\r\n// Setting this to false will result in smaller output, but no support for legacy ie8 hacks\r\n$legacy-support-for-ie8: $legacy-support-for-ie !default;\r\n\r\n// @private\r\n// The user can simply set $legacy-support-for-ie and 6, 7, and 8 will be set accordingly,\r\n// But in case the user set each of those explicitly, we need to sync the value of\r\n// this combined variable.\r\n$legacy-support-for-ie: $legacy-support-for-ie6 or $legacy-support-for-ie7 or $legacy-support-for-ie8;\r\n\r\n// Whether to output legacy support for mozilla.\r\n// Usually this means hacks to support Firefox 3.6 or earlier.\r\n$legacy-support-for-mozilla: true;\r\n\r\n// Support for mozilla in experimental css3 properties (-moz).\r\n$experimental-support-for-mozilla      : true !default;\r\n// Support for webkit in experimental css3 properties (-webkit).\r\n$experimental-support-for-webkit       : true !default;\r\n// Support for webkit's original (non-standard) gradient syntax.\r\n$support-for-original-webkit-gradients : true !default;\r\n// Support for opera in experimental css3 properties (-o).\r\n$experimental-support-for-opera        : true !default;\r\n// Support for microsoft in experimental css3 properties (-ms).\r\n$experimental-support-for-microsoft    : true !default;\r\n// Support for khtml in experimental css3 properties (-khtml).\r\n$experimental-support-for-khtml        : false !default;\r\n// Support for svg in experimental css3 properties.\r\n// Setting this to true might add significant size to your\r\n// generated stylesheets.\r\n$experimental-support-for-svg          : false !default;\r\n// Support for CSS PIE in experimental css3 properties (-pie).\r\n$experimental-support-for-pie          : false !default;\r\n"
	],
	"mappings": "",
	"names": []
}