{
	"version": 3,
	"file": "../../../../sass/scssphp-compass-master/stylesheets/compass/css3.css",
	"sources": [
		"../../../../sass/scssphp-compass-master/stylesheets/compass/css3.scss",
		"../../../../sass/scssphp-compass-master/stylesheets/compass/css3/border-radius.scss",
		"../../../../sass/scssphp-compass-master/stylesheets/compass/css3/shared.scss",
		"../../../../../../../../../../Desktop/Scout-App/bower_components/compass-mixins/lib/compass/_support.scss",
		"../../../../sass/scssphp-compass-master/stylesheets/compass/css3/inline-block.scss",
		"../../../../sass/scssphp-compass-master/stylesheets/compass/css3/opacity.scss",
		"../../../../sass/scssphp-compass-master/stylesheets/compass/css3/box-shadow.scss",
		"../../../../sass/scssphp-compass-master/stylesheets/compass/css3/text-shadow.scss",
		"../../../../sass/scssphp-compass-master/stylesheets/compass/css3/columns.scss",
		"../../../../sass/scssphp-compass-master/stylesheets/compass/css3/box-sizing.scss",
		"../../../../sass/scssphp-compass-master/stylesheets/compass/css3/box.scss",
		"../../../../sass/scssphp-compass-master/stylesheets/compass/css3/images.scss",
		"../../../../../../../../../../Desktop/Scout-App/bower_components/compass-mixins/lib/compass/utilities/general/_hacks.scss",
		"../../../../sass/scssphp-compass-master/stylesheets/compass/css3/background-clip.scss",
		"../../../../sass/scssphp-compass-master/stylesheets/compass/css3/background-origin.scss",
		"../../../../sass/scssphp-compass-master/stylesheets/compass/css3/background-size.scss",
		"../../../../sass/scssphp-compass-master/stylesheets/compass/css3/font-face.scss",
		"../../../../sass/scssphp-compass-master/stylesheets/compass/css3/transform.scss",
		"../../../../sass/scssphp-compass-master/stylesheets/compass/css3/transition.scss",
		"../../../../sass/scssphp-compass-master/stylesheets/compass/css3/appearance.scss",
		"../../../../sass/scssphp-compass-master/stylesheets/compass/css3/regions.scss",
		"../../../../sass/scssphp-compass-master/stylesheets/compass/css3/hyphenation.scss",
		"../../../../sass/scssphp-compass-master/stylesheets/compass/css3/filter.scss",
		"../../../../sass/scssphp-compass-master/stylesheets/compass/css3/user-interface.scss"
	],
	"sourcesContent": [
		"@import \"css3/border-radius\";\n@import \"css3/inline-block\";\n@import \"css3/opacity\";\n@import \"css3/box-shadow\";\n@import \"css3/text-shadow\";\n@import \"css3/columns\";\n@import \"css3/box-sizing\";\n@import \"css3/box\";\n@import \"css3/images\";\n@import \"css3/background-clip\";\n@import \"css3/background-origin\";\n@import \"css3/background-size\";\n@import \"css3/font-face\";\n@import \"css3/transform\";\n@import \"css3/transition\";\n@import \"css3/appearance\";\n@import \"css3/regions\";\n@import \"css3/hyphenation\";\n@import \"css3/filter\";\n@import \"css3/user-interface\";\n",
		"@import \"shared\";\n\n$default-border-radius: 5px !default;\n\n// Round all corners by a specific amount, defaults to value of `$default-border-radius`.\n//\n// When two values are passed, the first is the horizontal radius\n// and the second is the vertical radius.\n//\n// Note: webkit does not support shorthand syntax for several corners at once.\n// So in the case where you pass several values only the first will be passed to webkit.\n//\n// Examples:\n//\n//     .simple   { @include border-radius(4px, 4px); }\n//     .compound { @include border-radius(2px 5px, 3px 6px); }\n//     .crazy    { @include border-radius(1px 3px 5px 7px, 2px 4px 6px 8px)}\n//\n// Which generates:\n//\n//    .simple {\n//      -webkit-border-radius: 4px 4px;\n//      -moz-border-radius: 4px / 4px;\n//      -khtml-border-radius: 4px / 4px;\n//      border-radius: 4px / 4px; }\n//    \n//    .compound {\n//      -webkit-border-radius: 2px 3px;\n//      -moz-border-radius: 2px 5px / 3px 6px;\n//      -khtml-border-radius: 2px 5px / 3px 6px;\n//      border-radius: 2px 5px / 3px 6px; }\n//    \n//    .crazy {\n//      -webkit-border-radius: 1px 2px;\n//      -moz-border-radius: 1px 3px 5px 7px / 2px 4px 6px 8px;\n//      -khtml-border-radius: 1px 3px 5px 7px / 2px 4px 6px 8px;\n//      border-radius: 1px 3px 5px 7px / 2px 4px 6px 8px; }\n\n@mixin border-radius($radius: $default-border-radius, $vertical-radius: false) {\n\n  @if $vertical-radius {\n    // Webkit doesn't understand the official shorthand syntax for specifying\n    // a vertical radius unless so in case there's several we only take the first.\n    @include experimental(border-radius, first-value-of($radius) first-value-of($vertical-radius),\n      not -moz,\n      -webkit,\n      not -o,\n      not -ms,\n      not -khtml,\n      not official\n    );\n    @include experimental(\"border-radius\", $radius unquote(\"/\") $vertical-radius,\n      -moz,\n      not -webkit,\n      not -o,\n      not -ms,\n      -khtml,\n      official\n    );\n  }\n  @else {\n    @include experimental(border-radius, $radius);\n  }\n}\n\n// Round radius at position by amount.\n//\n// * legal values for `$vert`: `top`, `bottom`\n// * legal values for `$horz`: `left`, `right`\n\n@mixin border-corner-radius($vert, $horz, $radius: $default-border-radius) {\n  // Support for mozilla's syntax for specifying a corner\n  @include experimental(\"border-radius-#{$vert}#{$horz}\", $radius,\n    -moz,\n    not -webkit,\n    not -o,\n    not -ms,\n    not -khtml,\n    not official\n  );\n  @include experimental(\"border-#{$vert}-#{$horz}-radius\", $radius,\n    not -moz,\n    -webkit,\n    not -o,\n    not -ms,\n    -khtml,\n    official\n  );\n  \n}\n\n// Round top-left corner only\n\n@mixin border-top-left-radius($radius: $default-border-radius) {\n  @include border-corner-radius(top, left, $radius); }\n\n// Round top-right corner only\n\n@mixin border-top-right-radius($radius: $default-border-radius) {\n  @include border-corner-radius(top, right, $radius); }\n\n// Round bottom-left corner only\n\n@mixin border-bottom-left-radius($radius: $default-border-radius) {\n  @include border-corner-radius(bottom, left, $radius); }\n\n// Round bottom-right corner only\n\n@mixin border-bottom-right-radius($radius: $default-border-radius) {\n  @include border-corner-radius(bottom, right, $radius); }\n\n// Round both top corners by amount\n@mixin border-top-radius($radius: $default-border-radius) {\n  @include border-top-left-radius($radius);\n  @include border-top-right-radius($radius); }\n\n// Round both right corners by amount\n@mixin border-right-radius($radius: $default-border-radius) {\n  @include border-top-right-radius($radius);\n  @include border-bottom-right-radius($radius); }\n\n// Round both bottom corners by amount\n@mixin border-bottom-radius($radius: $default-border-radius) {\n  @include border-bottom-left-radius($radius);\n  @include border-bottom-right-radius($radius); }\n\n// Round both left corners by amount\n@mixin border-left-radius($radius: $default-border-radius) {\n  @include border-top-left-radius($radius);\n  @include border-bottom-left-radius($radius); }\n",
		"@import \"compass/support\";\n\n// This mixin provides basic support for CSS3 properties and\n// their corresponding experimental CSS2 properties when\n// the implementations are identical except for the property\n// prefix.\n@mixin experimental($property, $value,\n  $moz      : $experimental-support-for-mozilla,\n  $webkit   : $experimental-support-for-webkit,\n  $o        : $experimental-support-for-opera,\n  $ms       : $experimental-support-for-microsoft,\n  $khtml    : $experimental-support-for-khtml,\n  $official : true\n) {\n  @if $webkit  and $experimental-support-for-webkit    { -webkit-#{$property} : $value; }\n  @if $khtml   and $experimental-support-for-khtml     {  -khtml-#{$property} : $value; }\n  @if $moz     and $experimental-support-for-mozilla   {    -moz-#{$property} : $value; }\n  @if $ms      and $experimental-support-for-microsoft {     -ms-#{$property} : $value; }\n  @if $o       and $experimental-support-for-opera     {      -o-#{$property} : $value; }\n  @if $official                                        {         #{$property} : $value; }\n}\n\n// Same as experimental(), but for cases when the property is the same and the value is vendorized\n@mixin experimental-value($property, $value,\n  $moz      : $experimental-support-for-mozilla,\n  $webkit   : $experimental-support-for-webkit,\n  $o        : $experimental-support-for-opera,\n  $ms       : $experimental-support-for-microsoft,\n  $khtml    : $experimental-support-for-khtml,\n  $official : true\n) {\n  @if $webkit  and $experimental-support-for-webkit    { #{$property} : -webkit-#{$value}; }\n  @if $khtml   and $experimental-support-for-khtml     { #{$property} :  -khtml-#{$value}; }\n  @if $moz     and $experimental-support-for-mozilla   { #{$property} :    -moz-#{$value}; }\n  @if $ms      and $experimental-support-for-microsoft { #{$property} :     -ms-#{$value}; }\n  @if $o       and $experimental-support-for-opera     { #{$property} :      -o-#{$value}; }\n  @if $official                                        { #{$property} :         #{$value}; }\n}\n",
		"// Usually compass hacks apply to both ie6 & 7 -- set this to false to disable support for both.\r\n$legacy-support-for-ie: true !default;\r\n\r\n// Setting this to false will result in smaller output, but no support for ie6 hacks\r\n$legacy-support-for-ie6: $legacy-support-for-ie !default;\r\n\r\n// Setting this to false will result in smaller output, but no support for ie7 hacks\r\n$legacy-support-for-ie7: $legacy-support-for-ie !default;\r\n\r\n// Setting this to false will result in smaller output, but no support for legacy ie8 hacks\r\n$legacy-support-for-ie8: $legacy-support-for-ie !default;\r\n\r\n// @private\r\n// The user can simply set $legacy-support-for-ie and 6, 7, and 8 will be set accordingly,\r\n// But in case the user set each of those explicitly, we need to sync the value of\r\n// this combined variable.\r\n$legacy-support-for-ie: $legacy-support-for-ie6 or $legacy-support-for-ie7 or $legacy-support-for-ie8;\r\n\r\n// Whether to output legacy support for mozilla.\r\n// Usually this means hacks to support Firefox 3.6 or earlier.\r\n$legacy-support-for-mozilla: true;\r\n\r\n// Support for mozilla in experimental css3 properties (-moz).\r\n$experimental-support-for-mozilla      : true !default;\r\n// Support for webkit in experimental css3 properties (-webkit).\r\n$experimental-support-for-webkit       : true !default;\r\n// Support for webkit's original (non-standard) gradient syntax.\r\n$support-for-original-webkit-gradients : true !default;\r\n// Support for opera in experimental css3 properties (-o).\r\n$experimental-support-for-opera        : true !default;\r\n// Support for microsoft in experimental css3 properties (-ms).\r\n$experimental-support-for-microsoft    : true !default;\r\n// Support for khtml in experimental css3 properties (-khtml).\r\n$experimental-support-for-khtml        : false !default;\r\n// Support for svg in experimental css3 properties.\r\n// Setting this to true might add significant size to your\r\n// generated stylesheets.\r\n$experimental-support-for-svg          : false !default;\r\n// Support for CSS PIE in experimental css3 properties (-pie).\r\n$experimental-support-for-pie          : false !default;\r\n",
		"@import \"shared\";\n\n// Set `$inline-block-alignment` to `none` or `false` to disable the output\n// of a vertical-align property in the inline-block mixin.\n// Or set it to a legal value for `vertical-align` to change the default.\n$inline-block-alignment: middle !default;\n\n// Provides a cross-browser method to implement `display: inline-block;`\n@mixin inline-block($alignment: $inline-block-alignment) {\n  @if $legacy-support-for-mozilla {\n    display: -moz-inline-stack;\n  }\n  display: inline-block;\n  @if $alignment and $alignment != none {\n    vertical-align: $alignment;\n  }\n  @if $legacy-support-for-ie {\n    *vertical-align: auto;\n    zoom: 1;\n    *display: inline;\n  }\n}\n",
		"@import \"shared\";\n\n// Provides cross-browser CSS opacity. Takes a number between 0 and 1 as the argument, e.g. 0.5 for 50% opacity.\n//\n//     @param $opacity\n//         A number between 0 and 1, where 0 is transparent and 1 is opaque.\n\n@mixin opacity($opacity) {\n  @if $legacy-support-for-ie6 or $legacy-support-for-ie7 or $legacy-support-for-ie8 {\n    filter: unquote(\"progid:DXImageTransform.Microsoft.Alpha(Opacity=#{round($opacity * 100)})\");\n  }\n  opacity: $opacity;\n}\n\n// Make an element completely transparent.\n@mixin transparent { @include opacity(0); }\n\n// Make an element completely opaque.\n@mixin opaque { @include opacity(1); }\n",
		"// @doc off\n// These defaults make the arguments optional for this mixin\n// If you like, set different defaults before importing.\n// @doc on\n\n@import \"shared\";\n\n\n// The default color for box shadows\n$default-box-shadow-color: #333333 !default;\n\n// The default horizontal offset. Positive is to the right.\n$default-box-shadow-h-offset: 0px !default;\n\n// The default vertical offset. Positive is down.\n$default-box-shadow-v-offset: 0px !default;\n\n// The default blur length.\n$default-box-shadow-blur: 5px !default;\n\n// The default spread length.\n$default-box-shadow-spread : false !default;\n\n// The default shadow inset: inset or false (for standard shadow).\n$default-box-shadow-inset : false !default;\n\n// Provides cross-browser for Webkit, Gecko, and CSS3 box shadows when one or more box\n// shadows are needed.\n// Each shadow argument should adhere to the standard css3 syntax for the\n// box-shadow property.\n@mixin box-shadow(\n  $shadow-1 : default,\n  $shadow-2 : false,\n  $shadow-3 : false,\n  $shadow-4 : false,\n  $shadow-5 : false,\n  $shadow-6 : false,\n  $shadow-7 : false,\n  $shadow-8 : false,\n  $shadow-9 : false,\n  $shadow-10: false\n) {\n  @if $shadow-1 == default {\n    $shadow-1 : -compass-space-list(compact(if($default-box-shadow-inset, inset, false), $default-box-shadow-h-offset, $default-box-shadow-v-offset, $default-box-shadow-blur, $default-box-shadow-spread, $default-box-shadow-color));\n  }\n  $shadow : compact($shadow-1, $shadow-2, $shadow-3, $shadow-4, $shadow-5, $shadow-6, $shadow-7, $shadow-8, $shadow-9, $shadow-10);\n  @include experimental(box-shadow, $shadow,\n    -moz, -webkit, not -o, not -ms, not -khtml, official\n  );\n}\n\n// Provides a single cross-browser CSS box shadow for Webkit, Gecko, and CSS3.\n// Includes default arguments for color, horizontal offset, vertical offset, blur length, spread length, and inset.\n@mixin single-box-shadow(\n  $color  : $default-box-shadow-color,\n  $hoff   : $default-box-shadow-h-offset,\n  $voff   : $default-box-shadow-v-offset,\n  $blur   : $default-box-shadow-blur,\n  $spread : $default-box-shadow-spread,\n  $inset  : $default-box-shadow-inset\n) {\n  @if not ($inset == true or $inset == false or $inset == inset) {\n    @warn \"$inset expected to be true or the inset keyword. Got #{$inset} instead. Using: inset\";\n  }\n\n  @if $color == none {\n    @include box-shadow(none);\n  } @else {\n    $full   : $hoff $voff;\n    @if $blur   { $full: $full $blur;   }\n    @if $spread { $full: $full $spread; }\n    @if $color  { $full: $full $color;  }\n    @if $inset  { $full: inset $full;   }\n    @include box-shadow($full);\n  }\n}\n",
		"@import \"shared\";\n\n// These defaults make the arguments optional for this mixin\n// If you like, set different defaults in your project\n\n$default-text-shadow-color:    #aaa !default;\n$default-text-shadow-h-offset: 0px  !default;\n$default-text-shadow-v-offset: 0px  !default;\n$default-text-shadow-blur:     1px  !default;\n$default-text-shadow-spread:   false  !default;\n\n// Provides cross-browser text shadows when one or more shadows are needed.\n// Each shadow argument should adhere to the standard css3 syntax for the\n// text-shadow property.\n//\n// Note: if any shadow has a spread parameter, this will cause the mixin\n// to emit the shadow declaration twice, first without the spread,\n// then with the spread included. This allows you to progressively\n// enhance the browsers that do support the spread parameter.\n@mixin text-shadow(\n  $shadow-1 : default,\n  $shadow-2 : false,\n  $shadow-3 : false,\n  $shadow-4 : false,\n  $shadow-5 : false,\n  $shadow-6 : false,\n  $shadow-7 : false,\n  $shadow-8 : false,\n  $shadow-9 : false,\n  $shadow-10: false\n) {\n  @if $shadow-1 == default {\n    $shadow-1: compact($default-text-shadow-h-offset $default-text-shadow-v-offset $default-text-shadow-blur $default-text-shadow-spread $default-text-shadow-color);\n  }\n  $shadows-without-spread: join((),(),comma);\n  $shadows: join((),(),comma);\n  $has-spread: false;\n  @each $shadow in compact($shadow-1, $shadow-2, $shadow-3, $shadow-4, $shadow-5,\n                           $shadow-6, $shadow-7, $shadow-8, $shadow-9, $shadow-10) {\n    @if length($shadow) > 4 {\n      $has-spread: true;\n      $shadows-without-spread: append($shadows-without-spread, nth($shadow,1) nth($shadow,2) nth($shadow,3) nth($shadow,5));\n      $shadows: append($shadows, $shadow);\n    } else {\n      $shadows-without-spread: append($shadows-without-spread, $shadow);\n      $shadows: append($shadows, $shadow);\n    }\n  }\n  @if $has-spread {\n    text-shadow: $shadows-without-spread;\n  }\n  text-shadow: $shadows;\n}\n\n// Provides a single cross-browser CSS text shadow.\n//\n// Provides sensible defaults for the color, horizontal offset, vertical offset, blur, and spread\n// according to the configuration defaults above.\n@mixin single-text-shadow(\n  $hoff: false,\n  $voff: false,\n  $blur: false,\n  $spread: false,\n  $color: false\n) {\n  // A lot of people think the color comes first. It doesn't.\n  @if type-of($hoff) == color {\n    $temp-color: $hoff;\n    $hoff: $voff;\n    $voff: $blur;\n    $blur: $spread;\n    $spread: $color;\n    $color: $temp-color;\n  }\n  // Can't rely on default assignment with multiple supported argument orders.\n  $hoff:   if($hoff,   $hoff,   $default-text-shadow-h-offset);\n  $voff:   if($voff,   $voff,   $default-text-shadow-v-offset);\n  $blur:   if($blur,   $blur,   $default-text-shadow-blur    );\n  $spread: if($spread, $spread, $default-text-shadow-spread  );\n  $color:  if($color,  $color,  $default-text-shadow-color   );\n  // We don't need experimental support for this property.\n  @if $color == none or $hoff == none {\n    @include text-shadow(none);\n  } @else {\n    @include text-shadow(compact($hoff $voff $blur $spread $color));\n  }\n}\n",
		"@import \"shared\";\n\n// Specify the shorthand `columns` property.\n//\n// Example:\n//\n//     @include columns(20em 2)\n@mixin columns($width-and-count) {\n  @include experimental(columns, $width-and-count,\n    -moz, -webkit, -o, -ms, not -khtml, official\n  );\n}\n\n// Specify the number of columns\n@mixin column-count($count) {\n  @include experimental(column-count, $count,\n    -moz, -webkit, -o, -ms, not -khtml, official\n  );\n}\n\n// Specify the gap between columns e.g. `20px`\n@mixin column-gap($width) {\n  @include experimental(column-gap, $width,\n    -moz, -webkit, -o, -ms, not -khtml, official\n  );\n}\n\n// Specify the width of columns e.g. `100px`\n@mixin column-width($width) {\n  @include experimental(column-width, $width,\n    -moz, -webkit, -o, -ms, not -khtml, official\n  );\n}\n\n// Specify the width of the rule between columns e.g. `1px`\n@mixin column-rule-width($width) {\n  @include experimental(column-rule-width, $width,\n    -moz, -webkit, -o, -ms, not -khtml, official\n  );\n}\n\n// Specify the style of the rule between columns e.g. `dotted`.\n// This works like border-style.\n@mixin column-rule-style($style) {\n  @include experimental(column-rule-style, unquote($style),\n    -moz, -webkit, -o, -ms, not -khtml, official\n  );\n}\n\n// Specify the color of the rule between columns e.g. `blue`.\n// This works like border-color.\n@mixin column-rule-color($color) {\n  @include experimental(column-rule-color, $color,\n    -moz, -webkit, -o, -ms, not -khtml, official\n  );\n}\n\n// Mixin encompassing all column rule properties\n// For example:\n//\n//     @include column-rule(1px, solid, #c00)\n//\n// Or the values can be space separated:\n//\n//     @include column-rule(1px solid #c00)\n@mixin column-rule($width, $style: false, $color: false) {\n  $full : -compass-space-list(compact($width, $style, $color));\n  @include experimental(column-rule, $full,\n    -moz, -webkit, -o, -ms, not -khtml, official\n  );\n}\n\n// Mixin for setting column-break-before\n//\n// * legal values are auto, always, avoid, left, right, page, column, avoid-page, avoid-column\n//\n//  Example: \n//    h2.before {@include column-break-before(always);}\n//\n//  Which generates: \n//\n//  h2.before {    \n//    -webkit-column-break-before: always;\n//    column-break-before: always;}\n@mixin column-break-before($value: auto){\n   @include experimental(column-break-before, $value, not -moz, -webkit, not -o, not -ms, not -khtml, official );\n}\n\n// Mixin for setting column-break-after\n//\n// * legal values are auto, always, avoid, left, right, page, column, avoid-page, avoid-column\n//\n//  Example: \n//    h2.after {@include column-break-after(always); }\n//\n//  Which generates: \n//\n//  h2.after {\n//    -webkit-column-break-after: always;\n//    column-break-after: always; }\n@mixin column-break-after($value: auto){\n   @include experimental(column-break-after, $value, not -moz, -webkit, not -o, not -ms, not -khtml, official );\n}\n\n// Mixin for setting column-break-inside\n//\n// * legal values are auto, avoid, avoid-page, avoid-column\n//\n//  Example: \n//    h2.inside {@include column-break-inside();}\n//  Which generates: \n//  \n//  h2.inside {\n//    -webkit-column-break-inside: auto;\n//    column-break-inside: auto;}\n@mixin column-break-inside($value: auto){\n   @include experimental(column-break-inside, $value, not -moz, -webkit, not -o, not -ms, not -khtml, official );\n}\n\n// All-purpose mixin for setting column breaks.\n//\n// * legal values for $type : before, after, inside \n// * legal values for '$value' are dependent on $type\n//    * when $type = before, legal values are auto, always, avoid, left, right, page, column, avoid-page, avoid-column\n//    * when $type = after, legal values are auto, always, avoid, left, right, page, column, avoid-page, avoid-column\n//    * when $type = inside, legal values are auto, avoid, avoid-page, avoid-column\n//  \n//  Examples: \n//    h2.before {@include column-break(before, always);}\n//    h2.after {@include column-break(after, always); }\n//    h2.inside {@include column-break(inside); }\n//\n//  Which generates: \n//  h2.before {    \n//    -webkit-column-break-before: always;\n//    column-break-before: always;}\n//  \n//  h2.after {\n//    -webkit-column-break-after: always;\n//    column-break-after: always; }\n//\n//  h2.inside {\n//    -webkit-column-break-inside: auto;\n//    column-break-inside: auto;}\n \n@mixin column-break($type: before, $value: auto){\n   @include experimental(\"column-break-#{$type}\", $value, not -moz, -webkit, not -o, not -ms, not -khtml, official );\n}",
		"@import \"shared\";\n\n// Change the box model for Mozilla, Webkit, IE8 and the future\n//\n// @param $bs\n//   [ content-box | border-box ]\n\n@mixin box-sizing($bs) {\n  $bs: unquote($bs);\n  @include experimental(box-sizing, $bs,\n    -moz, -webkit, not -o, not -ms, not -khtml, official\n  );\n}\n",
		"@import \"shared\";\n\n// display:box; must be used for any of the other flexbox mixins to work properly\n@mixin display-box {\n  @include experimental-value(display, box,\n    -moz, -webkit, not -o, -ms, not -khtml, official\n  );\n}\n\n// Default box orientation, assuming that the user wants something less block-like\n$default-box-orient: horizontal !default;\n\n// Box orientation [ horizontal | vertical | inline-axis | block-axis | inherit ]\n@mixin box-orient(\n  $orientation: $default-box-orient\n) {\n  $orientation : unquote($orientation);\n  @include experimental(box-orient, $orientation,\n    -moz, -webkit, not -o, -ms, not -khtml, official\n  );\n}\n\n// Default box-align\n$default-box-align: stretch !default;\n\n// Box align [ start | end | center | baseline | stretch ]\n@mixin box-align(\n  $alignment: $default-box-align\n) {\n  $alignment : unquote($alignment);\n  @include experimental(box-align, $alignment,\n    -moz, -webkit, not -o, -ms, not -khtml, official\n  );\n}\n\n// Default box flex\n$default-box-flex: 0 !default;\n\n// mixin which takes an int argument for box flex. Apply this to the children inside the box.\n//\n// For example: \"div.display-box > div.child-box\" would get the box flex mixin.\n@mixin box-flex(\n  $flex: $default-box-flex\n) {\n  @include experimental(box-flex, $flex,\n    -moz, -webkit, not -o, -ms, not -khtml, official\n  );\n}\n\n// Default flex group\n$default-box-flex-group: 1 !default;\n\n// mixin which takes an int argument for flexible grouping\n@mixin box-flex-group(\n  $group: $default-box-flex-group\n) {\n  @include experimental(box-flex-group, $group,\n    -moz, -webkit, not -o, -ms, not -khtml, official\n  );\n}\n\n// default for ordinal group\n$default-box-ordinal-group: 1 !default;\n\n// mixin which takes an int argument for ordinal grouping and rearranging the order\n@mixin box-ordinal-group(\n  $group: $default-ordinal-flex-group\n) {\n  @include experimental(box-ordinal-group, $group,\n    -moz, -webkit, not -o, -ms, not -khtml, official\n  );\n}\n\n// Box direction default value\n$default-box-direction: normal !default;\n\n// mixin for box-direction [ normal | reverse | inherit ]\n@mixin box-direction(\n  $direction: $default-box-direction\n) {\n  $direction: unquote($direction);\n  @include experimental(box-direction, $direction,\n    -moz, -webkit, not -o, -ms, not -khtml, official\n  );\n}\n\n// default for box lines\n$default-box-lines: single !default;\n\n// mixin for box lines [ single | multiple ]\n@mixin box-lines(\n  $lines: $default-box-lines\n) {\n  $lines: unquote($lines);\n  @include experimental(box-lines, $lines,\n    -moz, -webkit, not -o, -ms, not -khtml, official\n  );\n}\n\n// default for box pack\n$default-box-pack: start !default;\n\n// mixin for box pack [ start | end | center | justify ]\n@mixin box-pack(\n  $pack: $default-box-pack\n) {\n  $pack: unquote($pack);\n  @include experimental(box-pack, $pack,\n    -moz, -webkit, not -o, -ms, not -khtml, official\n  );\n}",
		"@import \"shared\";\n@import \"compass/utilities/general/hacks\";\n\n// Background property support for vendor prefixing within values.\n@mixin background(\n  $background-1,\n  $background-2: false,\n  $background-3: false,\n  $background-4: false,\n  $background-5: false,\n  $background-6: false,\n  $background-7: false,\n  $background-8: false,\n  $background-9: false,\n  $background-10: false\n) {\n  $backgrounds: compact($background-1, $background-2, $background-3, $background-4, $background-5,\n                        $background-6, $background-7, $background-8, $background-9, $background-10);\n  $mult-bgs: -compass-list-size($backgrounds) > 1;\n  $add-pie-bg: prefixed(-pie,   $backgrounds) or $mult-bgs;\n  @if $experimental-support-for-svg          and prefixed(-svg,    $backgrounds) {      background:    -svg($backgrounds); }\n  @if $support-for-original-webkit-gradients and prefixed(-owg,    $backgrounds) {      background:    -owg($backgrounds); }\n  @if $experimental-support-for-webkit       and prefixed(-webkit, $backgrounds) {      background: -webkit($backgrounds); }\n  @if $experimental-support-for-mozilla      and prefixed(-moz,    $backgrounds) {      background:    -moz($backgrounds); }\n  @if $experimental-support-for-opera        and prefixed(-o,      $backgrounds) {      background:      -o($backgrounds); }\n  @if $experimental-support-for-pie          and $add-pie-bg                     { -pie-background:    -pie($backgrounds); }\n                                                                                        background:         $backgrounds ;\n}\n\n@mixin background-with-css2-fallback(\n  $background-1,\n  $background-2: false,\n  $background-3: false,\n  $background-4: false,\n  $background-5: false,\n  $background-6: false,\n  $background-7: false,\n  $background-8: false,\n  $background-9: false,\n  $background-10: false\n) {\n  $backgrounds: compact($background-1, $background-2, $background-3, $background-4, $background-5,\n                        $background-6, $background-7, $background-8, $background-9, $background-10);\n  $mult-bgs: -compass-list-size($backgrounds) > 1;\n  $simple-background: if($mult-bgs or prefixed(-css2, $backgrounds), -css2(-compass-nth($backgrounds, last)), false);\n  @if not blank($simple-background) { background: $simple-background; }\n  @include background($background-1, $background-2, $background-3, $background-4, $background-5,\n                      $background-6, $background-7, $background-8, $background-9, $background-10);\n}\n\n\n// Background image property support for vendor prefixing within values.\n@mixin background-image(\n  $image-1,\n  $image-2: false,\n  $image-3: false,\n  $image-4: false,\n  $image-5: false,\n  $image-6: false,\n  $image-7: false,\n  $image-8: false,\n  $image-9: false,\n  $image-10: false\n) {\n  $images: compact($image-1, $image-2, $image-3, $image-4, $image-5, $image-6, $image-7, $image-8, $image-9, $image-10);\n  $add-pie-bg: prefixed(-pie,   $images) or -compass-list-size($images) > 1;\n\n  @if $experimental-support-for-svg          and prefixed(-svg,    $images) { background-image:    -svg($images); background-size: 100%; }\n  @if $support-for-original-webkit-gradients and prefixed(-owg,    $images) { background-image:    -owg($images); }\n  @if $experimental-support-for-webkit       and prefixed(-webkit, $images) { background-image: -webkit($images); }\n  @if $experimental-support-for-mozilla      and prefixed(-moz,    $images) { background-image:    -moz($images); }\n  @if $experimental-support-for-opera        and prefixed(-o,      $images) { background-image:      -o($images); }\n  @if $experimental-support-for-pie          and $add-pie-bg                { @warn \"PIE does not support background-image. Use @include background(#{$images}) instead.\" }\n                                                                              background-image:         $images ;\n}\n\n// Emit a IE-Specific filters that renders a simple linear gradient.\n// For use in IE 6 - 8. Best practice would have you apply this via a\n// conditional IE stylesheet, but if you must, you should place this before\n// any background-image properties that you have specified.\n//\n// For the `$orientation` parameter, you can pass `vertical` or `horizontal`.\n@mixin filter-gradient($start-color, $end-color, $orientation: vertical) {\n  @include has-layout;\n  $gradient-type: if($orientation == vertical, 0, 1);\n  @if $legacy-support-for-ie6 or $legacy-support-for-ie7 or $legacy-support-for-ie8 {\n    filter: progid:DXImageTransform.Microsoft.gradient(gradientType=#{$gradient-type}, startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}');\n  }\n}\n\n\n// Border image property support for vendor prefixing properties and values.\n@mixin border-image($value) {\n  @if $experimental-support-for-mozilla      {    -moz-border-image:    -moz(reject(-compass-list($value), fill)); }\n  @if $support-for-original-webkit-gradients { -webkit-border-image:    -owg(reject(-compass-list($value), fill)); }\n  @if $experimental-support-for-webkit       { -webkit-border-image: -webkit(reject(-compass-list($value), fill)); }\n  @if $experimental-support-for-opera        {      -o-border-image:      -o(reject(-compass-list($value), fill)); }\n  @if $experimental-support-for-svg          {         border-image:    -svg(reject(-compass-list($value), fill)); }\n                                                       border-image:                              $value;\n}\n\n// List style image property support for vendor prefixing within values.\n@mixin list-style-image($image) {\n  @if $experimental-support-for-mozilla      and prefixed(-moz,    $image) { list-style-image:    -moz($image); }\n  @if $support-for-original-webkit-gradients and prefixed(-owg,    $image) { list-style-image:    -owg($image); }\n  @if $experimental-support-for-webkit       and prefixed(-webkit, $image) { list-style-image: -webkit($image); }\n  @if $experimental-support-for-opera        and prefixed(-o,      $image) { list-style-image:      -o($image); }\n  @if $experimental-support-for-svg          and prefixed(-svg,    $image) { list-style-image:    -svg($image); }\n                                                                             list-style-image:         $image ;\n}\n\n// List style property support for vendor prefixing within values.\n@mixin list-style($value) {\n  $value: -compass-list($value);\n  @if $experimental-support-for-mozilla      and prefixed(-moz,    $value) { list-style-image:    -moz($value); }\n  @if $support-for-original-webkit-gradients and prefixed(-owg,    $value) { list-style-image:    -owg($value); }\n  @if $experimental-support-for-webkit       and prefixed(-webkit, $value) { list-style-image: -webkit($value); }\n  @if $experimental-support-for-opera        and prefixed(-o,      $value) { list-style-image:      -o($value); }\n  @if $experimental-support-for-svg          and prefixed(-svg,    $value) { list-style-image:    -svg($value); }\n                                                                             list-style-image:         $value ;\n}\n\n// content property support for vendor prefixing within values.\n@mixin content($value) {\n  $value: -compass-list($value);\n  @if $experimental-support-for-mozilla      and prefixed(-moz,    $value) { content:    -moz($value); }\n  @if $support-for-original-webkit-gradients and prefixed(-owg,    $value) { content:    -owg($value); }\n  @if $experimental-support-for-webkit       and prefixed(-webkit, $value) { content: -webkit($value); }\n  @if $experimental-support-for-opera        and prefixed(-o,      $value) { content:      -o($value); }\n  @if $experimental-support-for-svg          and prefixed(-svg,    $value) { content:    -svg($value); }\n                                                                             content:         $value ;\n}\n",
		"@import \"../../support\";\r\n\r\n// The `zoom` approach generates less CSS but does not validate.\r\n// Set this to `block` to use the display-property to hack the\r\n// element to gain layout.\r\n$default-has-layout-approach: zoom !default;\r\n\r\n// This mixin causes an element matching the selector\r\n// to gain the \"hasLayout\" property in internet explorer.\r\n// More information on [hasLayout](http://reference.sitepoint.com/css/haslayout).\r\n@mixin has-layout($approach: $default-has-layout-approach) {\r\n  @if $legacy-support-for-ie {\r\n    @if $approach == zoom {\r\n      @include has-layout-zoom;\r\n    } @else if $approach == block {\r\n      @include has-layout-block;\r\n    } @else {\r\n      @warn \"Unknown has-layout approach: #{$approach}\";\r\n      @include has-layout-zoom;\r\n    }\r\n  }\r\n}\r\n\r\n@mixin has-layout-zoom {\r\n  @if $legacy-support-for-ie6 or $legacy-support-for-ie7 {\r\n    *zoom: 1;\r\n  }\r\n}\r\n\r\n@mixin has-layout-block {\r\n  @if $legacy-support-for-ie {\r\n    // This makes ie6 get layout\r\n    display: inline-block;\r\n    // and this puts it back to block\r\n    & { display: block; }\r\n  }\r\n}\r\n\r\n// A hack to supply IE6 (and below) with a different property value.\r\n// [Read more](http://www.cssportal.com/css-hacks/#in_css-important).\r\n@mixin bang-hack($property, $value, $ie6-value) {\r\n  @if $legacy-support-for-ie6 {\r\n    #{$property}: #{$value} !important;\r\n    #{$property}: #{$ie6-value};\r\n  }\r\n}\r\n",
		"@import \"shared\";\n\n// The default value is `padding-box` -- the box model used by modern browsers.\n//\n// If you wish to do so, you can override the default constant with `border-box`\n//\n// To override to the default border-box model, use this code:\n//     $default-background-clip: border-box\n\n$default-background-clip: padding-box !default;\n\n// Clip the background (image and color) at the edge of the padding or border.\n//\n// Legal Values:\n//\n//   * padding-box\n//   * border-box\n//   * text\n\n@mixin background-clip($clip: $default-background-clip) {\n  // webkit and mozilla use the deprecated short [border | padding]\n  $clip: unquote($clip);\n  $deprecated: $clip;\n  @if $clip == padding-box { $deprecated: padding; }\n  @if $clip == border-box { $deprecated: border; }\n  // Support for webkit and mozilla's use of the deprecated short form\n  @include experimental(background-clip, $deprecated,\n    -moz,\n    -webkit,\n    not -o,\n    not -ms,\n    not -khtml,\n    not official\n  );\n  @include experimental(background-clip, $clip,\n    not -moz,\n    not -webkit,\n    not -o,\n    not -ms,\n    -khtml,\n    official\n  );\n}\n",
		"// Override `$default-background-origin` to change the default.\n\n@import \"shared\";\n\n$default-background-origin: content-box !default;\n\n// Position the background off the edge of the padding, border or content\n//\n// * Possible values:\n//   * `padding-box`\n//   * `border-box`\n//   * `content-box`\n// * browser defaults to `padding-box`\n// * mixin defaults to `content-box`\n\n\n@mixin background-origin($origin: $default-background-origin) {\n  $origin: unquote($origin);\n  // webkit and mozilla use the deprecated short [border | padding | content]\n  $deprecated: $origin;\n  @if $origin == padding-box { $deprecated: padding; }\n  @if $origin == border-box  { $deprecated: border;  }\n  @if $origin == content-box { $deprecated: content; }\n\n  // Support for webkit and mozilla's use of the deprecated short form\n  @include experimental(background-origin, $deprecated,\n    -moz,\n    -webkit,\n    not -o,\n    not -ms,\n    not -khtml,\n    not official\n  );\n  @include experimental(background-origin, $origin,\n    not -moz,\n    not -webkit,\n    -o,\n    -ms,\n    -khtml,\n    official\n  );\n}\n",
		"@import \"shared\";\n\n//  override to change the default\n$default-background-size: 100% auto !default;\n\n// Set the size of background images using px, width and height, or percentages.\n// Currently supported in: Opera, Gecko, Webkit.\n//\n// * percentages are relative to the background-origin (default = padding-box)\n// * mixin defaults to: `$default-background-size`\n@mixin background-size(\n  $size-1: $default-background-size,\n  $size-2: false,\n  $size-3: false,\n  $size-4: false,\n  $size-5: false,\n  $size-6: false,\n  $size-7: false,\n  $size-8: false,\n  $size-9: false,\n  $size-10: false\n) {\n  $size-1: if(type-of($size-1) == string, unquote($size-1), $size-1);\n  $sizes: compact($size-1, $size-2, $size-3, $size-4, $size-5, $size-6, $size-7, $size-8, $size-9, $size-10);\n  @include experimental(background-size, $sizes, -moz, -webkit, -o, not -ms, not -khtml);\n}\n",
		"@import \"shared\";\n\n// Cross-browser support for @font-face. Supports IE, Gecko, Webkit, Opera.\n//\n// * $name is required, arbitrary, and what you will use in font stacks.\n// * $font-files is required using font-files('relative/location', 'format').\n//   for best results use this order: woff, opentype/truetype, svg\n// * $eot is required by IE, and is a relative location of the eot file.\n// * $weight shows if the font is bold, defaults to normal\n// * $style defaults to normal, might be also italic\n// * For android 2.2 Compatiblity, please ensure that your web page has\n//   a meta viewport tag.\n// * To support iOS < 4.2, an SVG file must be provided\n//\n// If you need to generate other formats check out the Font Squirrel\n// [font generator](http://www.fontsquirrel.com/fontface/generator)\n//\n\n// In order to refer to a specific style of the font in your stylesheets as \n// e.g. \"font-style: italic;\",  you may add a couple of @font-face includes\n// containing the respective font files for each style and specying\n// respective the $style parameter.\n\n// Order of the includes matters, and it is: normal, bold, italic, bold+italic.\n\n@mixin font-face(\n  $name, \n  $font-files, \n  $eot: false,\n  $weight: false,\n  $style: false\n) {\n  $iefont: unquote(\"#{$eot}?#iefix\");\n  @font-face {\n    font-family: quote($name);\n    @if $eot {\n      src: font-url($eot);\n      $font-files: font-url($iefont) unquote(\"format('eot')\"), $font-files; \n    }\n    src: $font-files;\n    @if $weight {\n      font-weight: $weight;\n    }\n    @if $style {\n      font-style: $style;\n    }\n  }\n}\n",
		"@import \"shared\";\n\n// @doc off\n// Note ----------------------------------------------------------------------\n// Safari, Chrome, and Firefox all support 3D transforms. However,\n// only in the most recent builds. You should also provide fallback 2d support for\n// Opera and IE. IE10 is slated to have 3d enabled, but is currently unreleased.\n// To make that easy, all 2D transforms include an browser-targeting toggle ($only3d)\n// to switch between the two support lists. The toggle defaults to 'false' (2D),\n// and also accepts 'true' (3D). Currently the lists are as follows:\n// 2D: Mozilla, Webkit, Opera, Official\n// 3D: Webkit, Firefox.\n\n// Available Transforms ------------------------------------------------------\n// - Scale (2d and 3d)\n// - Rotate (2d and 3d)\n// - Translate (2d and 3d)\n// - Skew (2d only)\n\n// Transform Parameters ------------------------------------------------------\n// - Transform Origin (2d and 3d)\n// - Perspective (3d)\n// - Perspective Origin (3d)\n// - Transform Style (3d)\n// - Backface Visibility (3d)\n\n// Mixins --------------------------------------------------------------------\n// transform-origin\n//  - shortcuts:  transform-origin2d, transform-origin3d\n//  - helpers:    apply-origin\n// transform\n//  - shortcuts:  transform2d, transform3d\n//  - helpers:    simple-transform, create-transform\n// perspective\n//  - helpers:    perspective-origin\n// transform-style\n// backface-visibility\n// scale\n//  - shortcuts:  scaleX, scaleY, scaleZ, scale3d\n// rotate\n//  - shortcuts:  rotateX, rotateY, rotate3d\n// translate\n//  - shortcuts:  translateX, translateY, translateZ, translate3d\n// skew\n//  - shortcuts:  skewX, skewY\n\n// Defaults ------------------------------------------------------------------\n// @doc on\n\n// The default x-origin for transforms\n$default-origin-x    : 50%                   !default;\n// The default y-origin for transforms\n$default-origin-y    : 50%                   !default;\n// The default z-origin for transforms\n$default-origin-z    : 50%                   !default;\n\n\n// The default x-multiplier for scaling\n$default-scale-x     : 1.25                  !default;\n// The default y-multiplier for scaling\n$default-scale-y     : $default-scale-x      !default;\n// The default z-multiplier for scaling\n$default-scale-z     : $default-scale-x      !default;\n\n\n// The default angle for rotations\n$default-rotate      : 45deg                 !default;\n\n\n// The default x-vector for the axis of 3d rotations\n$default-vector-x    : 1                     !default;\n// The default y-vector for the axis of 3d rotations\n$default-vector-y    : 1                     !default;\n// The default z-vector for the axis of 3d rotations\n$default-vector-z    : 1                     !default;\n\n\n// The default x-length for translations\n$default-translate-x : 1em                   !default;\n// The default y-length for translations\n$default-translate-y : $default-translate-x  !default;\n// The default z-length for translations\n$default-translate-z : $default-translate-x  !default;\n\n\n// The default x-angle for skewing\n$default-skew-x      : 5deg                  !default;\n// The default y-angle for skewing\n$default-skew-y      : 5deg                  !default;\n\n\n// **Transform-origin**\n// Transform-origin sent as a complete string\n//\n//     @include apply-origin( origin [, 3D-only ] )\n//\n// where 'origin' is a space separated list containing 1-3 (x/y/z) coordinates\n// in percentages, absolute (px, cm, in, em etc..) or relative\n// (left, top, right, bottom, center) units\n//\n// @param only3d Set this to true to only apply this\n// mixin where browsers have 3D support.\n@mixin apply-origin($origin, $only3d) {\n  $only3d: $only3d or -compass-list-size(-compass-list($origin)) > 2;\n  @if $only3d {\n    @include experimental(transform-origin, $origin,\n      -moz, -webkit, -o, -ms, not -khtml, official\n    );\n  } @else {\n    @include experimental(transform-origin, $origin,\n      -moz, -webkit, -o, -ms, not -khtml, official\n    );\n  }\n}\n\n// Transform-origin sent as individual arguments:\n//\n//     @include transform-origin( [ origin-x, origin-y, origin-z, 3D-only ] )\n//\n// where the 3 'origin-' arguments represent x/y/z coordinates.\n//\n// **NOTE:** setting z coordinates triggers 3D support list, leave false for 2D support\n@mixin transform-origin(\n  $origin-x: $default-origin-x,\n  $origin-y: $default-origin-y,\n  $origin-z: false,\n  $only3d:   if($origin-z, true, false)\n) {\n  $origin: unquote('');\n  @if $origin-x or $origin-y or $origin-z {\n    @if $origin-x { $origin: $origin-x; } @else { $origin: 50%; }\n    @if $origin-y { $origin: $origin $origin-y; } @else { @if $origin-z { $origin: $origin 50%; }}\n    @if $origin-z { $origin: $origin $origin-z; }\n    @include apply-origin($origin, $only3d);\n  }\n}\n\n\n// Transform sent as a complete string:\n//\n//     @include transform( transforms [, 3D-only ] )\n//\n// where 'transforms' is a space separated list of all the transforms to be applied.\n@mixin transform(\n  $transform,\n  $only3d: false\n) {\n  @if $only3d {\n    @include experimental(transform, $transform,\n      -moz, -webkit, -o, -ms, not -khtml, official\n    );\n  } @else {\n    @include experimental(transform, $transform,\n      -moz, -webkit, -o, -ms, not -khtml, official\n    );\n  }\n}\n\n// Shortcut to target all browsers with 2D transform support\n@mixin transform2d($trans) {\n  @include transform($trans, false);\n}\n\n// Shortcut to target only browsers with 3D transform support\n@mixin transform3d($trans) {\n  @include transform($trans, true);\n}\n\n// @doc off\n// 3D Parameters -------------------------------------------------------------\n// @doc on\n\n// Set the perspective of 3D transforms on the children of an element:\n//\n//      @include perspective( perspective )\n//\n// where 'perspective' is a unitless number representing the depth of the\n// z-axis. The higher the perspective, the more exaggerated the foreshortening.\n// values from 500 to 1000 are more-or-less \"normal\" - a good starting-point.\n@mixin perspective($p) {\n  @include experimental(perspective, $p,\n    -moz, -webkit, -o, -ms, not -khtml, official\n  );\n}\n\n// Set the origin position for the perspective\n//\n//      @include perspective-origin(origin-x [origin-y])\n//\n// where the two arguments represent x/y coordinates\n@mixin perspective-origin($origin: 50%) {\n  @include experimental(perspective-origin, $origin,\n    -moz, -webkit, -o, -ms, not -khtml, official\n  );\n}\n\n// Determine whether a 3D objects children also live in the given 3D space\n//\n//      @include transform-style( [ style ] )\n//\n// where `style` can be either `flat` or `preserve-3d`.\n// Browsers default to `flat`, mixin defaults to `preserve-3d`.\n@mixin transform-style($style: preserve-3d) {\n  @include experimental(transform-style, $style,\n    -moz, -webkit, -o, -ms, not -khtml, official\n  );\n}\n\n// Determine the visibility of an element when it's back is turned\n//\n//     @include backface-visibility( [ visibility ] )\n//\n// where `visibility` can be either `visible` or `hidden`.\n// Browsers default to visible, mixin defaults to hidden\n@mixin backface-visibility($visibility: hidden) {\n  @include experimental(backface-visibility, $visibility,\n    -moz, -webkit, -o, -ms, not -khtml, official\n  );\n}\n\n// @doc off\n// Transform Partials --------------------------------------------------------\n// These work well on their own, but they don't add to each other, they override.\n// Use along with transform parameter mixins to adjust origin, perspective and style\n// ---------------------------------------------------------------------------\n\n\n// Scale ---------------------------------------------------------------------\n// @doc on\n\n// Scale an object along the x and y axis:\n//\n//      @include scale( [ scale-x, scale-y, perspective, 3D-only ] )\n//\n// where the 'scale-' arguments are unitless multipliers of the x and y dimensions\n// and perspective, which works the same as the stand-alone perspective property/mixin\n// but applies to the individual element (multiplied with any parent perspective)\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin scale(\n  $scale-x:     $default-scale-x,\n  $scale-y:     $scale-x,\n  $perspective: false,\n  $only3d:      false\n) {\n  $trans: scale($scale-x, $scale-y);\n  @if $perspective { $trans: perspective($perspective) $trans; }\n  @include transform($trans, $only3d);\n}\n\n// Scale an object along the x axis\n// @include scaleX( [ scale-x, perspective, 3D-only ] )\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin scaleX(\n  $scale:       $default-scale-x,\n  $perspective: false,\n  $only3d:      false\n) {\n  $trans: scaleX($scale);\n  @if $perspective { $trans: perspective($perspective) $trans; }\n  @include transform($trans, $only3d);\n}\n\n// Scale an object along the y axis\n// @include scaleY( [ scale-y, perspective, 3D-only ] )\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin scaleY(\n  $scale:       $default-scale-y,\n  $perspective: false,\n  $only3d:      false\n) {\n  $trans: scaleY($scale);\n  @if $perspective { $trans: perspective($perspective) $trans; }\n  @include transform($trans, $only3d);\n}\n\n// Scale an object along the z axis\n// @include scaleZ( [ scale-z, perspective ] )\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin scaleZ(\n  $scale: $default-scale-z,\n  $perspective: false\n) {\n  $trans: scaleZ($scale);\n  @if $perspective { $trans: perspective($perspective) $trans; }\n  @include transform3d($trans);\n}\n\n// Scale and object along all three axis\n// @include scale3d( [ scale-x, scale-y, scale-z, perspective ] )\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin scale3d(\n  $scale-x:     $default-scale-x,\n  $scale-y:     $default-scale-y,\n  $scale-z:     $default-scale-z,\n  $perspective: false\n) {\n  $trans: scale3d($scale-x, $scale-y, $scale-z);\n  @if $perspective { $trans: perspective($perspective) $trans; }\n  @include transform3d($trans);\n}\n\n// @doc off\n// Rotate --------------------------------------------------------------------\n// @doc on\n\n// Rotate an object around the z axis  (2D)\n// @include rotate( [ rotation, perspective, 3D-only ] )\n// where 'rotation' is an angle set in degrees (deg) or radian (rad) units\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin rotate(\n  $rotate:      $default-rotate,\n  $perspective: false,\n  $only3d:      false\n) {\n  $trans: rotate($rotate);\n  @if $perspective { $trans: perspective($perspective) $trans; }\n  @include transform($trans, $only3d);\n}\n\n// A longcut for 'rotate' in case you forget that 'z' is implied\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin rotateZ(\n  $rotate:      $default-rotate,\n  $perspective: false,\n  $only3d:      false\n) {\n  @include rotate($rotate, $perspective, $only3d);\n}\n\n// Rotate an object around the x axis (3D)\n// @include rotateX( [ rotation, perspective ] )\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin rotateX(\n  $rotate: $default-rotate,\n  $perspective: false\n) {\n  $trans: rotateX($rotate);\n  @if $perspective { $trans: perspective($perspective) $trans; }\n  @include transform3d($trans);\n}\n\n// Rotate an object around the y axis (3D)\n// @include rotate( [ rotation, perspective ] )\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin rotateY(\n  $rotate: $default-rotate,\n  $perspective: false\n) {\n  $trans: rotateY($rotate);\n  @if $perspective { $trans: perspective($perspective) $trans; }\n  @include transform3d($trans);\n}\n\n// Rotate an object around an arbitrary axis (3D)\n// @include rotate( [ vector-x, vector-y, vector-z, rotation, perspective ] )\n// where the 'vector-' arguments accept unitless numbers.\n// These numbers are not important on their own, but in relation to one another\n// creating an axis from your transform-origin, along the axis of Xx = Yy = Zz.\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin rotate3d(\n  $vector-x: $default-vector-x,\n  $vector-y: $default-vector-y,\n  $vector-z: $default-vector-z,\n  $rotate: $default-rotate,\n  $perspective: false\n) {\n  $trans: rotate3d($vector-x, $vector-y, $vector-z, $rotate);\n  @if $perspective { $trans: perspective($perspective) $trans; }\n  @include transform3d($trans);\n}\n\n// @doc off\n// Translate -----------------------------------------------------------------\n// @doc on\n\n// Move an object along the x or y axis (2D)\n// @include translate( [ translate-x, translate-y, perspective, 3D-only ] )\n// where the 'translate-' arguments accept any distance in percentages or absolute (px, cm, in, em etc..) units.\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin translate(\n  $translate-x: $default-translate-x,\n  $translate-y: $default-translate-y,\n  $perspective: false,\n  $only3d:      false\n) {\n  $trans: translate($translate-x, $translate-y);\n  @if $perspective { $trans: perspective($perspective) $trans; }\n  @include transform($trans, $only3d);\n}\n\n// Move an object along the x axis (2D)\n// @include translate( [ translate-x, perspective, 3D-only ] )\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin translateX(\n  $trans-x:     $default-translate-x,\n  $perspective: false,\n  $only3d:      false\n) {\n  $trans: translateX($trans-x);\n  @if $perspective { $trans: perspective($perspective) $trans; }\n  @include transform($trans, $only3d);\n}\n\n// Move an object along the y axis (2D)\n// @include translate( [ translate-y, perspective, 3D-only ] )\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin translateY(\n  $trans-y:     $default-translate-y,\n  $perspective: false,\n  $only3d:      false\n) {\n  $trans: translateY($trans-y);\n  @if $perspective { $trans: perspective($perspective) $trans; }\n  @include transform($trans, $only3d);\n}\n\n// Move an object along the z axis (3D)\n// @include translate( [ translate-z, perspective ] )\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin translateZ(\n  $trans-z:     $default-translate-z,\n  $perspective: false\n) {\n  $trans: translateZ($trans-z);\n  @if $perspective { $trans: perspective($perspective) $trans; }\n  @include transform3d($trans);\n}\n\n// Move an object along the x, y and z axis (3D)\n// @include translate( [ translate-x, translate-y, translate-z, perspective ] )\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin translate3d(\n  $translate-x: $default-translate-x,\n  $translate-y: $default-translate-y,\n  $translate-z: $default-translate-z,\n  $perspective: false\n) {\n  $trans: translate3d($translate-x, $translate-y, $translate-z);\n  @if $perspective { $trans: perspective($perspective) $trans; }\n  @include transform3d($trans);\n}\n\n// @doc off\n// Skew ----------------------------------------------------------------------\n// @doc on\n\n// Skew an element:\n//\n//     @include skew( [ skew-x, skew-y, 3D-only ] )\n//\n// where the 'skew-' arguments accept css angles in degrees (deg) or radian (rad) units.\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin skew(\n  $skew-x: $default-skew-x,\n  $skew-y: $default-skew-y,\n  $only3d: false\n) {\n  $trans: skew($skew-x, $skew-y);\n  @include transform($trans, $only3d);\n}\n\n// Skew an element along the x axiz\n//\n//     @include skew( [ skew-x, 3D-only ] )\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin skewX(\n  $skew-x: $default-skew-x,\n  $only3d: false\n) {\n  $trans: skewX($skew-x);\n  @include transform($trans, $only3d);\n}\n\n// Skew an element along the y axis\n//\n//     @include skew( [ skew-y, 3D-only ] )\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin skewY(\n  $skew-y: $default-skew-y,\n  $only3d: false\n) {\n  $trans: skewY($skew-y);\n  @include transform($trans, $only3d);\n}\n\n\n// Full transform mixins\n// For settings any combination of transforms as arguments\n// These are complex and not highly recommended for daily use. They are mainly\n// here for backward-compatibility purposes.\n//\n// * they include origin adjustments\n// * scale takes a multiplier (unitless), rotate and skew take degrees (deg)\n//\n// **Note** This mixin cannot be combined with other transform mixins.\n@mixin create-transform(\n  $perspective: false,\n  $scale-x:     false,\n  $scale-y:     false,\n  $scale-z:     false,\n  $rotate-x:    false,\n  $rotate-y:    false,\n  $rotate-z:    false,\n  $rotate3d:    false,\n  $trans-x:     false,\n  $trans-y:     false,\n  $trans-z:     false,\n  $skew-x:      false,\n  $skew-y:      false,\n  $origin-x:    false,\n  $origin-y:    false,\n  $origin-z:    false,\n  $only3d:      false\n) {\n  $trans: unquote(\"\");\n\n  // perspective\n  @if $perspective { $trans: perspective($perspective) ; }\n\n  // scale\n  @if $scale-x and $scale-y {\n    @if $scale-z { $trans: $trans scale3d($scale-x, $scale-y, $scale-z); }\n    @else { $trans: $trans scale($scale-x, $scale-y); }\n  } @else {\n    @if $scale-x { $trans: $trans scaleX($scale-x); }\n    @if $scale-y { $trans: $trans scaleY($scale-y); }\n    @if $scale-z { $trans: $trans scaleZ($scale-z); }\n  }\n\n  // rotate\n  @if $rotate-x { $trans: $trans rotateX($rotate-x); }\n  @if $rotate-y { $trans: $trans rotateY($rotate-y); }\n  @if $rotate-z { $trans: $trans rotateZ($rotate-z); }\n  @if $rotate3d { $trans: $trans rotate3d($rotate3d); }\n\n  // translate\n  @if $trans-x and $trans-y {\n    @if $trans-z { $trans: $trans translate3d($trans-x, $trans-y, $trans-z); }\n    @else { $trans: $trans translate($trans-x, $trans-y); }\n  } @else {\n    @if $trans-x { $trans: $trans translateX($trans-x); }\n    @if $trans-y { $trans: $trans translateY($trans-y); }\n    @if $trans-z { $trans: $trans translateZ($trans-z); }\n  }\n\n  // skew\n  @if $skew-x and $skew-y { $trans: $trans skew($skew-x, $skew-y); }\n  @else {\n    @if $skew-x { $trans: $trans skewX($skew-x); }\n    @if $skew-y { $trans: $trans skewY($skew-y); }\n  }\n\n  // apply it!\n  @include transform($trans, $only3d);\n  @include transform-origin($origin-x, $origin-y, $origin-z, $only3d);\n}\n\n\n// A simplified set of options\n// backwards-compatible with the previous version of the 'transform' mixin\n@mixin simple-transform(\n  $scale:    false,\n  $rotate:   false,\n  $trans-x:  false,\n  $trans-y:  false,\n  $skew-x:   false,\n  $skew-y:   false,\n  $origin-x: false,\n  $origin-y: false\n) {\n  @include create-transform(\n    false,\n    $scale, $scale, false,\n    false, false, $rotate, false,\n    $trans-x, $trans-y, false,\n    $skew-x, $skew-y,\n    $origin-x, $origin-y, false,\n    false\n  );\n}\n",
		"@import \"shared\";\n\n// CSS Transitions\n// Currently only works in Webkit.\n//\n// * expected in CSS3, FireFox 3.6/7 and Opera Presto 2.3\n// * We'll be prepared.\n//\n// Including this submodule sets following defaults for the mixins:\n//\n//     $default-transition-property : all\n//     $default-transition-duration : 1s\n//     $default-transition-function : false\n//     $default-transition-delay    : false\n//\n// Override them if you like. Timing-function and delay are set to false for browser defaults (ease, 0s).\n\n$default-transition-property: all !default;\n\n$default-transition-duration: 1s !default;\n\n$default-transition-function: false !default;\n\n$default-transition-delay: false !default;\n\n$transitionable-prefixed-values: transform, transform-origin !default;\n\n// One or more properties to transition\n//\n// * for multiple, use a comma-delimited list\n// * also accepts \"all\" or \"none\"\n\n@mixin transition-property($property-1: $default-transition-property,\n  $property-2 : false,\n  $property-3 : false,\n  $property-4 : false,\n  $property-5 : false,\n  $property-6 : false,\n  $property-7 : false,\n  $property-8 : false,\n  $property-9 : false,\n  $property-10: false\n) {\n  @if type-of($property-1) == string { $property-1: unquote($property-1); }\n  $properties: compact($property-1, $property-2, $property-3, $property-4, $property-5, $property-6, $property-7, $property-8, $property-9, $property-10);\n  @if $experimental-support-for-webkit    {       -webkit-transition-property : prefixed-for-transition(-webkit, $properties); }\n  @if $experimental-support-for-mozilla   {          -moz-transition-property : prefixed-for-transition(-moz,    $properties); }\n  @if $experimental-support-for-opera     {            -o-transition-property : prefixed-for-transition(-o,      $properties); }\n                                                          transition-property : $properties;\n}\n\n// One or more durations in seconds\n//\n// * for multiple, use a comma-delimited list\n// * these durations will affect the properties in the same list position\n\n@mixin transition-duration($duration-1: $default-transition-duration,\n  $duration-2 : false,\n  $duration-3 : false,\n  $duration-4 : false,\n  $duration-5 : false,\n  $duration-6 : false,\n  $duration-7 : false,\n  $duration-8 : false,\n  $duration-9 : false,\n  $duration-10: false\n) {\n  @if type-of($duration-1) == string { $duration-1: unquote($duration-1); }\n  $durations: compact($duration-1, $duration-2, $duration-3, $duration-4, $duration-5, $duration-6, $duration-7, $duration-8, $duration-9, $duration-10);\n  @include experimental(transition-duration, $durations,\n    -moz, -webkit, -o, not -ms, not -khtml, official\n  );\n}\n\n// One or more timing functions\n//\n// * [ ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier(x1, y1, x2, y2)]\n// * For multiple, use a comma-delimited list\n// * These functions will effect the properties in the same list position\n\n@mixin transition-timing-function($function-1: $default-transition-function,\n  $function-2 : false,\n  $function-3 : false,\n  $function-4 : false,\n  $function-5 : false,\n  $function-6 : false,\n  $function-7 : false,\n  $function-8 : false,\n  $function-9 : false,\n  $function-10: false\n) {\n  $function-1: unquote($function-1);\n  $functions: compact($function-1, $function-2, $function-3, $function-4, $function-5, $function-6, $function-7, $function-8, $function-9, $function-10);\n  @include experimental(transition-timing-function, $functions,\n    -moz, -webkit, -o, not -ms, not -khtml, official\n  );\n}\n\n// One or more transition-delays in seconds\n//\n// * for multiple, use a comma-delimited list\n// * these delays will effect the properties in the same list position\n\n@mixin transition-delay($delay-1: $default-transition-delay,\n  $delay-2 : false,\n  $delay-3 : false,\n  $delay-4 : false,\n  $delay-5 : false,\n  $delay-6 : false,\n  $delay-7 : false,\n  $delay-8 : false,\n  $delay-9 : false,\n  $delay-10: false\n) {\n  @if type-of($delay-1) == string { $delay-1: unquote($delay-1); }\n  $delays: compact($delay-1, $delay-2, $delay-3, $delay-4, $delay-5, $delay-6, $delay-7, $delay-8, $delay-9, $delay-10);\n  @include experimental(transition-delay, $delays,\n    -moz, -webkit, -o, not -ms, not -khtml, official\n  );\n}\n\n// Transition all-in-one shorthand\n\n@mixin single-transition(\n  $property: $default-transition-property,\n  $duration: $default-transition-duration,\n  $function: $default-transition-function,\n  $delay: $default-transition-delay\n) {\n  @include transition(compact($property $duration $function $delay));\n}\n\n@mixin transition(\n  $transition-1 : default,\n  $transition-2 : false,\n  $transition-3 : false,\n  $transition-4 : false,\n  $transition-5 : false,\n  $transition-6 : false,\n  $transition-7 : false,\n  $transition-8 : false,\n  $transition-9 : false,\n  $transition-10: false\n) {\n  @if $transition-1 == default {\n    $transition-1 : compact($default-transition-property $default-transition-duration $default-transition-function $default-transition-delay);\n  }\n  $transitions: false;\n  @if type-of($transition-1) == list and type-of(nth($transition-1,1)) == list {\n    $transitions: join($transition-1, compact($transition-2, $transition-3, $transition-4, $transition-5, $transition-6, $transition-7, $transition-8, $transition-9, $transition-10), comma);\n  } @else {\n    $transitions : compact($transition-1, $transition-2, $transition-3, $transition-4, $transition-5, $transition-6, $transition-7, $transition-8, $transition-9, $transition-10);\n  }\n  $delays: comma-list();\n  $has-delays: false;\n  $webkit-value: comma-list();\n  $moz-value: comma-list();\n  $o-value: comma-list();\n\n  // This block can be made considerably simpler at the point in time that\n  // we no longer need to deal with the differences in how delays are treated.\n  @each $transition in $transitions {\n    // Extract the values from the list\n    // (this would be cleaner if nth took a 3rd argument to provide a default value).\n    $property: nth($transition, 1);\n    $duration: false;\n    $timing-function: false;\n    $delay: false;\n    @if length($transition) > 1 { $duration:        nth($transition, 2); }\n    @if length($transition) > 2 { $timing-function: nth($transition, 3); }\n    @if length($transition) > 3 { $delay:           nth($transition, 4); $has-delays: true; }\n\n    // If a delay is provided without a timing function\n    @if is-time($timing-function) and not $delay { $delay: $timing-function; $timing-function: false; $has-delays: true; }\n\n    // Keep a list of delays in case one is specified\n    $delays: append($delays, if($delay, $delay, 0s));\n\n    $webkit-value: append($webkit-value, compact(prefixed-for-transition(-webkit, $property) $duration $timing-function));\n       $moz-value: append(   $moz-value, compact(prefixed-for-transition(   -moz, $property) $duration $timing-function $delay));\n         $o-value: append(     $o-value, compact(prefixed-for-transition(     -o, $property) $duration $timing-function $delay));\n  }\n\n  @if $experimental-support-for-webkit    {       -webkit-transition : $webkit-value;\n    // old webkit doesn't support the delay parameter in the shorthand so we progressively enhance it.\n    @if $has-delays                       { -webkit-transition-delay : $delays;       } }\n  @if $experimental-support-for-mozilla   {          -moz-transition : $moz-value;    }\n  @if $experimental-support-for-opera     {            -o-transition : $o-value;      }\n                                                          transition : $transitions;\n}\n\n// coerce a list to be comma delimited or make a new, empty comma delimited list.\n@function comma-list($list: ()) {\n  @return join((), $list, comma);\n}\n\n// Returns `$property` with the given prefix if it is found in `$transitionable-prefixed-values`.\n@function prefixed-for-transition($prefix, $property) {\n  @if type-of($property) == list {\n    $new-list: comma-list();\n    @each $v in $property {\n      $new-list: append($new-list, prefixed-for-transition($prefix, $v));\n    }\n    @return $new-list;\n  } @else {\n    @if index($transitionable-prefixed-values, $property) {\n      @return #{$prefix}-#{$property};\n    } @else {\n      @return $property;\n    }\n  }\n}\n\n// Checks if the value given is a unit of time.\n@function is-time($value) {\n  @if type-of($value) == number {\n    @return not not index(s ms, unit($value));\n  } @else {\n    @return false;\n  }\n}\n",
		"@import \"shared\";\n\n// Change the appearance for Mozilla, Webkit and possibly the future.\n// The appearance property is currently not present in any newer CSS specification.\n//\n// There is no official list of accepted values, but you might check these source:\n//   Mozilla : https://developer.mozilla.org/en/CSS/-moz-appearance\n//   Webkit  : http://code.google.com/p/webkit-mirror/source/browse/Source/WebCore/css/CSSValueKeywords.in?spec=svnf1aea559dcd025a8946aa7da6e4e8306f5c1b604&r=63c7d1af44430b314233fea342c3ddb2a052e365\n//   (search for 'appearance' within the page)\n\n@mixin appearance($ap) {\n  $ap: unquote($ap);\n  @include experimental(appearance, $ap,\n    -moz, -webkit, not -o, not -ms, not -khtml, official\n  );\n}\n",
		"@import \"shared\";\n\n// Webkit, IE10 and future support for [CSS Regions](http://dev.w3.org/csswg/css3-regions/)\n//\n// $target is a value you use to link two regions of your css. Give the source of your content the flow-into property, and give your target container the flow-from property.\n//\n// For a visual explanation, see the diagrams at Chris Coyier's\n// [CSS-Tricks](http://css-tricks.com/content-folding/)\n\n@mixin flow-into($target) {\n  $target: unquote($target);\n  @include experimental(flow-into, $target,\n    not -moz, -webkit, not -o, -ms, not -khtml, not official\n  );\n}\n\n@mixin flow-from($target) {\n  $target: unquote($target);\n  @include experimental(flow-from, $target,\n    not -moz, -webkit, not -o, -ms, not -khtml, not official\n  );\n}",
		"@import \"shared\";\n\n// Mixins to support specific CSS Text Level 3 elements\n//\n//\n//\n// Mixin for word-break properties\n// http://www.w3.org/css3-text/#word-break\n// * legal values for $type : normal, keep-all, break-all\n//\n// Example:\n//    p.wordBreak {@include word-break(break-all);}\n//\n// Which generates:\n//    p.wordBreak {\n//      -ms-word-break: break-all;\n//      word-break: break-all;\n//      word-break: break-word;}\n//\n@mixin word-break($value: normal){\n  @if $value == break-all {\n    //Most browsers handle the break-all case the same...\n    @include experimental(word-break, $value,\n      not -moz, not -webkit, not -o, -ms, not -khtml, official\n    );\n    //Webkit handles break-all differently... as break-word\n    @include experimental(word-break, break-word,\n      not -moz, not -webkit, not -o, not -ms, not -khtml, official\n    );\n  }\n  @else {\n    @include experimental(word-break, $value,\n      not -moz, not -webkit, not -o, -ms, not -khtml, official\n    );\n  }\n}\n\n// Mixin for the hyphens property\n//\n// W3C specification: http://www.w3.org/TR/css3-text/#hyphens\n// * legal values for $type : auto, manual, none\n//\n// Example:\n//  p {\n//    @include hyphens(auto);}\n// Which generates:\n//  p {\n//    -moz-hyphens: auto;\n//    -webkit-hyphens: auto;\n//    hyphens: auto;}\n//\n@mixin hyphens($value: auto){\n  @include experimental(hyphens, $value,\n    -moz, -webkit, not -o, not -ms, not -khtml, official\n  );\n}\n\n// Mixin for x-browser hyphenation based on @auchenberg's post:\n// Removes the need for the <wbr/> HTML tag\n// http://blog.kenneth.io/blog/2012/03/04/word-wrapping-hypernation-using-css/\n//\n//  Example:\n//  div {@include hyphenation;}\n//\n//  Which generates:\n//    div {\n//      -ms-word-break: break-all;\n//      word-break: break-all;\n//      word-break: break-word;\n//      -moz-hyphens: auto;\n//      -webkit-hyphens: auto;\n//      hyphens: auto;}\n//\n@mixin hyphenation{\n  @include word-break(break-all);\n  @include hyphens;\n}\n",
		"@import \"shared\";\n\n// Provides cross-browser support for the upcoming (?) css3 filter property.\n//\n// Each filter argument should adhere to the standard css3 syntax for the\n// filter property.\n@mixin filter (\n  $filter-1,\n  $filter-2 : false,\n  $filter-3 : false,\n  $filter-4 : false,\n  $filter-5 : false,\n  $filter-6 : false,\n  $filter-7 : false,\n  $filter-8 : false,\n  $filter-9 : false,\n  $filter-10: false\n) {\n  $filter : compact($filter-1, $filter-2, $filter-3, $filter-4, $filter-5, $filter-6, $filter-7, $filter-8, $filter-9, $filter-10);\n  @include experimental(filter, $filter,\n    -moz, -webkit, not -o, not -ms, not -khtml, official\n  );\n}\n",
		"// User Interface ------------------------------------------------------------\n// This file can be expanded to handle all the user interface properties as\n// they become available in browsers:\n// http://www.w3.org/TR/2000/WD-css3-userint-20000216\n@import \"shared\";\n\n\n// This property controls the selection model and granularity of an element.\n//\n// @param $select\n//   [ none | text | toggle | element | elements | all | inherit ]\n@mixin user-select($select) {\n  $select: unquote($select);\n  @include experimental(user-select, $select,\n    -moz, -webkit, not -o, not -ms, -khtml, official\n  );\n}\n"
	],
	"mappings": "",
	"names": []
}